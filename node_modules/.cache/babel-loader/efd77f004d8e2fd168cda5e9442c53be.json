{"ast":null,"code":"import { DataTextureLoader, DataUtils, FloatType, HalfFloatType, LinearEncoding, LinearFilter, RedFormat, RGBAFormat } from 'three';\nimport * as fflate from '../libs/fflate.module.js';\n/**\n * OpenEXR loader currently supports uncompressed, ZIP(S), RLE, PIZ and DWA/B compression.\n * Supports reading as UnsignedByte, HalfFloat and Float type data texture.\n *\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation, so I have preserved their copyright notices.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\n\nclass EXRLoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  }\n\n  parse(buffer) {\n    const USHORT_RANGE = 1 << 16;\n    const BITMAP_SIZE = USHORT_RANGE >> 3;\n    const HUF_ENCBITS = 16; // literal (value) bit length\n\n    const HUF_DECBITS = 14; // decoding bit size (>= 8)\n\n    const HUF_ENCSIZE = (1 << HUF_ENCBITS) + 1; // encoding table size\n\n    const HUF_DECSIZE = 1 << HUF_DECBITS; // decoding table size\n\n    const HUF_DECMASK = HUF_DECSIZE - 1;\n    const NBITS = 16;\n    const A_OFFSET = 1 << NBITS - 1;\n    const MOD_MASK = (1 << NBITS) - 1;\n    const SHORT_ZEROCODE_RUN = 59;\n    const LONG_ZEROCODE_RUN = 63;\n    const SHORTEST_LONG_RUN = 2 + LONG_ZEROCODE_RUN - SHORT_ZEROCODE_RUN;\n    const ULONG_SIZE = 8;\n    const FLOAT32_SIZE = 4;\n    const INT32_SIZE = 4;\n    const INT16_SIZE = 2;\n    const INT8_SIZE = 1;\n    const STATIC_HUFFMAN = 0;\n    const DEFLATE = 1;\n    const UNKNOWN = 0;\n    const LOSSY_DCT = 1;\n    const RLE = 2;\n    const logBase = Math.pow(2.7182818, 2.2);\n\n    function reverseLutFromBitmap(bitmap, lut) {\n      let k = 0;\n\n      for (let i = 0; i < USHORT_RANGE; ++i) {\n        if (i == 0 || bitmap[i >> 3] & 1 << (i & 7)) {\n          lut[k++] = i;\n        }\n      }\n\n      const n = k - 1;\n\n      while (k < USHORT_RANGE) lut[k++] = 0;\n\n      return n;\n    }\n\n    function hufClearDecTable(hdec) {\n      for (let i = 0; i < HUF_DECSIZE; i++) {\n        hdec[i] = {};\n        hdec[i].len = 0;\n        hdec[i].lit = 0;\n        hdec[i].p = null;\n      }\n    }\n\n    const getBitsReturn = {\n      l: 0,\n      c: 0,\n      lc: 0\n    };\n\n    function getBits(nBits, c, lc, uInt8Array, inOffset) {\n      while (lc < nBits) {\n        c = c << 8 | parseUint8Array(uInt8Array, inOffset);\n        lc += 8;\n      }\n\n      lc -= nBits;\n      getBitsReturn.l = c >> lc & (1 << nBits) - 1;\n      getBitsReturn.c = c;\n      getBitsReturn.lc = lc;\n    }\n\n    const hufTableBuffer = new Array(59);\n\n    function hufCanonicalCodeTable(hcode) {\n      for (let i = 0; i <= 58; ++i) hufTableBuffer[i] = 0;\n\n      for (let i = 0; i < HUF_ENCSIZE; ++i) hufTableBuffer[hcode[i]] += 1;\n\n      let c = 0;\n\n      for (let i = 58; i > 0; --i) {\n        const nc = c + hufTableBuffer[i] >> 1;\n        hufTableBuffer[i] = c;\n        c = nc;\n      }\n\n      for (let i = 0; i < HUF_ENCSIZE; ++i) {\n        const l = hcode[i];\n        if (l > 0) hcode[i] = l | hufTableBuffer[l]++ << 6;\n      }\n    }\n\n    function hufUnpackEncTable(uInt8Array, inOffset, ni, im, iM, hcode) {\n      const p = inOffset;\n      let c = 0;\n      let lc = 0;\n\n      for (; im <= iM; im++) {\n        if (p.value - inOffset.value > ni) return false;\n        getBits(6, c, lc, uInt8Array, p);\n        const l = getBitsReturn.l;\n        c = getBitsReturn.c;\n        lc = getBitsReturn.lc;\n        hcode[im] = l;\n\n        if (l == LONG_ZEROCODE_RUN) {\n          if (p.value - inOffset.value > ni) {\n            throw new Error('Something wrong with hufUnpackEncTable');\n          }\n\n          getBits(8, c, lc, uInt8Array, p);\n          let zerun = getBitsReturn.l + SHORTEST_LONG_RUN;\n          c = getBitsReturn.c;\n          lc = getBitsReturn.lc;\n\n          if (im + zerun > iM + 1) {\n            throw new Error('Something wrong with hufUnpackEncTable');\n          }\n\n          while (zerun--) hcode[im++] = 0;\n\n          im--;\n        } else if (l >= SHORT_ZEROCODE_RUN) {\n          let zerun = l - SHORT_ZEROCODE_RUN + 2;\n\n          if (im + zerun > iM + 1) {\n            throw new Error('Something wrong with hufUnpackEncTable');\n          }\n\n          while (zerun--) hcode[im++] = 0;\n\n          im--;\n        }\n      }\n\n      hufCanonicalCodeTable(hcode);\n    }\n\n    function hufLength(code) {\n      return code & 63;\n    }\n\n    function hufCode(code) {\n      return code >> 6;\n    }\n\n    function hufBuildDecTable(hcode, im, iM, hdecod) {\n      for (; im <= iM; im++) {\n        const c = hufCode(hcode[im]);\n        const l = hufLength(hcode[im]);\n\n        if (c >> l) {\n          throw new Error('Invalid table entry');\n        }\n\n        if (l > HUF_DECBITS) {\n          const pl = hdecod[c >> l - HUF_DECBITS];\n\n          if (pl.len) {\n            throw new Error('Invalid table entry');\n          }\n\n          pl.lit++;\n\n          if (pl.p) {\n            const p = pl.p;\n            pl.p = new Array(pl.lit);\n\n            for (let i = 0; i < pl.lit - 1; ++i) {\n              pl.p[i] = p[i];\n            }\n          } else {\n            pl.p = new Array(1);\n          }\n\n          pl.p[pl.lit - 1] = im;\n        } else if (l) {\n          let plOffset = 0;\n\n          for (let i = 1 << HUF_DECBITS - l; i > 0; i--) {\n            const pl = hdecod[(c << HUF_DECBITS - l) + plOffset];\n\n            if (pl.len || pl.p) {\n              throw new Error('Invalid table entry');\n            }\n\n            pl.len = l;\n            pl.lit = im;\n            plOffset++;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    const getCharReturn = {\n      c: 0,\n      lc: 0\n    };\n\n    function getChar(c, lc, uInt8Array, inOffset) {\n      c = c << 8 | parseUint8Array(uInt8Array, inOffset);\n      lc += 8;\n      getCharReturn.c = c;\n      getCharReturn.lc = lc;\n    }\n\n    const getCodeReturn = {\n      c: 0,\n      lc: 0\n    };\n\n    function getCode(po, rlc, c, lc, uInt8Array, inOffset, outBuffer, outBufferOffset, outBufferEndOffset) {\n      if (po == rlc) {\n        if (lc < 8) {\n          getChar(c, lc, uInt8Array, inOffset);\n          c = getCharReturn.c;\n          lc = getCharReturn.lc;\n        }\n\n        lc -= 8;\n        let cs = c >> lc;\n        cs = new Uint8Array([cs])[0];\n\n        if (outBufferOffset.value + cs > outBufferEndOffset) {\n          return false;\n        }\n\n        const s = outBuffer[outBufferOffset.value - 1];\n\n        while (cs-- > 0) {\n          outBuffer[outBufferOffset.value++] = s;\n        }\n      } else if (outBufferOffset.value < outBufferEndOffset) {\n        outBuffer[outBufferOffset.value++] = po;\n      } else {\n        return false;\n      }\n\n      getCodeReturn.c = c;\n      getCodeReturn.lc = lc;\n    }\n\n    function UInt16(value) {\n      return value & 0xFFFF;\n    }\n\n    function Int16(value) {\n      const ref = UInt16(value);\n      return ref > 0x7FFF ? ref - 0x10000 : ref;\n    }\n\n    const wdec14Return = {\n      a: 0,\n      b: 0\n    };\n\n    function wdec14(l, h) {\n      const ls = Int16(l);\n      const hs = Int16(h);\n      const hi = hs;\n      const ai = ls + (hi & 1) + (hi >> 1);\n      const as = ai;\n      const bs = ai - hi;\n      wdec14Return.a = as;\n      wdec14Return.b = bs;\n    }\n\n    function wdec16(l, h) {\n      const m = UInt16(l);\n      const d = UInt16(h);\n      const bb = m - (d >> 1) & MOD_MASK;\n      const aa = d + bb - A_OFFSET & MOD_MASK;\n      wdec14Return.a = aa;\n      wdec14Return.b = bb;\n    }\n\n    function wav2Decode(buffer, j, nx, ox, ny, oy, mx) {\n      const w14 = mx < 1 << 14;\n      const n = nx > ny ? ny : nx;\n      let p = 1;\n      let p2;\n      let py;\n\n      while (p <= n) p <<= 1;\n\n      p >>= 1;\n      p2 = p;\n      p >>= 1;\n\n      while (p >= 1) {\n        py = 0;\n        const ey = py + oy * (ny - p2);\n        const oy1 = oy * p;\n        const oy2 = oy * p2;\n        const ox1 = ox * p;\n        const ox2 = ox * p2;\n        let i00, i01, i10, i11;\n\n        for (; py <= ey; py += oy2) {\n          let px = py;\n          const ex = py + ox * (nx - p2);\n\n          for (; px <= ex; px += ox2) {\n            const p01 = px + ox1;\n            const p10 = px + oy1;\n            const p11 = p10 + ox1;\n\n            if (w14) {\n              wdec14(buffer[px + j], buffer[p10 + j]);\n              i00 = wdec14Return.a;\n              i10 = wdec14Return.b;\n              wdec14(buffer[p01 + j], buffer[p11 + j]);\n              i01 = wdec14Return.a;\n              i11 = wdec14Return.b;\n              wdec14(i00, i01);\n              buffer[px + j] = wdec14Return.a;\n              buffer[p01 + j] = wdec14Return.b;\n              wdec14(i10, i11);\n              buffer[p10 + j] = wdec14Return.a;\n              buffer[p11 + j] = wdec14Return.b;\n            } else {\n              wdec16(buffer[px + j], buffer[p10 + j]);\n              i00 = wdec14Return.a;\n              i10 = wdec14Return.b;\n              wdec16(buffer[p01 + j], buffer[p11 + j]);\n              i01 = wdec14Return.a;\n              i11 = wdec14Return.b;\n              wdec16(i00, i01);\n              buffer[px + j] = wdec14Return.a;\n              buffer[p01 + j] = wdec14Return.b;\n              wdec16(i10, i11);\n              buffer[p10 + j] = wdec14Return.a;\n              buffer[p11 + j] = wdec14Return.b;\n            }\n          }\n\n          if (nx & p) {\n            const p10 = px + oy1;\n            if (w14) wdec14(buffer[px + j], buffer[p10 + j]);else wdec16(buffer[px + j], buffer[p10 + j]);\n            i00 = wdec14Return.a;\n            buffer[p10 + j] = wdec14Return.b;\n            buffer[px + j] = i00;\n          }\n        }\n\n        if (ny & p) {\n          let px = py;\n          const ex = py + ox * (nx - p2);\n\n          for (; px <= ex; px += ox2) {\n            const p01 = px + ox1;\n            if (w14) wdec14(buffer[px + j], buffer[p01 + j]);else wdec16(buffer[px + j], buffer[p01 + j]);\n            i00 = wdec14Return.a;\n            buffer[p01 + j] = wdec14Return.b;\n            buffer[px + j] = i00;\n          }\n        }\n\n        p2 = p;\n        p >>= 1;\n      }\n\n      return py;\n    }\n\n    function hufDecode(encodingTable, decodingTable, uInt8Array, inOffset, ni, rlc, no, outBuffer, outOffset) {\n      let c = 0;\n      let lc = 0;\n      const outBufferEndOffset = no;\n      const inOffsetEnd = Math.trunc(inOffset.value + (ni + 7) / 8);\n\n      while (inOffset.value < inOffsetEnd) {\n        getChar(c, lc, uInt8Array, inOffset);\n        c = getCharReturn.c;\n        lc = getCharReturn.lc;\n\n        while (lc >= HUF_DECBITS) {\n          const index = c >> lc - HUF_DECBITS & HUF_DECMASK;\n          const pl = decodingTable[index];\n\n          if (pl.len) {\n            lc -= pl.len;\n            getCode(pl.lit, rlc, c, lc, uInt8Array, inOffset, outBuffer, outOffset, outBufferEndOffset);\n            c = getCodeReturn.c;\n            lc = getCodeReturn.lc;\n          } else {\n            if (!pl.p) {\n              throw new Error('hufDecode issues');\n            }\n\n            let j;\n\n            for (j = 0; j < pl.lit; j++) {\n              const l = hufLength(encodingTable[pl.p[j]]);\n\n              while (lc < l && inOffset.value < inOffsetEnd) {\n                getChar(c, lc, uInt8Array, inOffset);\n                c = getCharReturn.c;\n                lc = getCharReturn.lc;\n              }\n\n              if (lc >= l) {\n                if (hufCode(encodingTable[pl.p[j]]) == (c >> lc - l & (1 << l) - 1)) {\n                  lc -= l;\n                  getCode(pl.p[j], rlc, c, lc, uInt8Array, inOffset, outBuffer, outOffset, outBufferEndOffset);\n                  c = getCodeReturn.c;\n                  lc = getCodeReturn.lc;\n                  break;\n                }\n              }\n            }\n\n            if (j == pl.lit) {\n              throw new Error('hufDecode issues');\n            }\n          }\n        }\n      }\n\n      const i = 8 - ni & 7;\n      c >>= i;\n      lc -= i;\n\n      while (lc > 0) {\n        const pl = decodingTable[c << HUF_DECBITS - lc & HUF_DECMASK];\n\n        if (pl.len) {\n          lc -= pl.len;\n          getCode(pl.lit, rlc, c, lc, uInt8Array, inOffset, outBuffer, outOffset, outBufferEndOffset);\n          c = getCodeReturn.c;\n          lc = getCodeReturn.lc;\n        } else {\n          throw new Error('hufDecode issues');\n        }\n      }\n\n      return true;\n    }\n\n    function hufUncompress(uInt8Array, inDataView, inOffset, nCompressed, outBuffer, nRaw) {\n      const outOffset = {\n        value: 0\n      };\n      const initialInOffset = inOffset.value;\n      const im = parseUint32(inDataView, inOffset);\n      const iM = parseUint32(inDataView, inOffset);\n      inOffset.value += 4;\n      const nBits = parseUint32(inDataView, inOffset);\n      inOffset.value += 4;\n\n      if (im < 0 || im >= HUF_ENCSIZE || iM < 0 || iM >= HUF_ENCSIZE) {\n        throw new Error('Something wrong with HUF_ENCSIZE');\n      }\n\n      const freq = new Array(HUF_ENCSIZE);\n      const hdec = new Array(HUF_DECSIZE);\n      hufClearDecTable(hdec);\n      const ni = nCompressed - (inOffset.value - initialInOffset);\n      hufUnpackEncTable(uInt8Array, inOffset, ni, im, iM, freq);\n\n      if (nBits > 8 * (nCompressed - (inOffset.value - initialInOffset))) {\n        throw new Error('Something wrong with hufUncompress');\n      }\n\n      hufBuildDecTable(freq, im, iM, hdec);\n      hufDecode(freq, hdec, uInt8Array, inOffset, nBits, iM, nRaw, outBuffer, outOffset);\n    }\n\n    function applyLut(lut, data, nData) {\n      for (let i = 0; i < nData; ++i) {\n        data[i] = lut[data[i]];\n      }\n    }\n\n    function predictor(source) {\n      for (let t = 1; t < source.length; t++) {\n        const d = source[t - 1] + source[t] - 128;\n        source[t] = d;\n      }\n    }\n\n    function interleaveScalar(source, out) {\n      let t1 = 0;\n      let t2 = Math.floor((source.length + 1) / 2);\n      let s = 0;\n      const stop = source.length - 1;\n\n      while (true) {\n        if (s > stop) break;\n        out[s++] = source[t1++];\n        if (s > stop) break;\n        out[s++] = source[t2++];\n      }\n    }\n\n    function decodeRunLength(source) {\n      let size = source.byteLength;\n      const out = new Array();\n      let p = 0;\n      const reader = new DataView(source);\n\n      while (size > 0) {\n        const l = reader.getInt8(p++);\n\n        if (l < 0) {\n          const count = -l;\n          size -= count + 1;\n\n          for (let i = 0; i < count; i++) {\n            out.push(reader.getUint8(p++));\n          }\n        } else {\n          const count = l;\n          size -= 2;\n          const value = reader.getUint8(p++);\n\n          for (let i = 0; i < count + 1; i++) {\n            out.push(value);\n          }\n        }\n      }\n\n      return out;\n    }\n\n    function lossyDctDecode(cscSet, rowPtrs, channelData, acBuffer, dcBuffer, outBuffer) {\n      let dataView = new DataView(outBuffer.buffer);\n      const width = channelData[cscSet.idx[0]].width;\n      const height = channelData[cscSet.idx[0]].height;\n      const numComp = 3;\n      const numFullBlocksX = Math.floor(width / 8.0);\n      const numBlocksX = Math.ceil(width / 8.0);\n      const numBlocksY = Math.ceil(height / 8.0);\n      const leftoverX = width - (numBlocksX - 1) * 8;\n      const leftoverY = height - (numBlocksY - 1) * 8;\n      const currAcComp = {\n        value: 0\n      };\n      const currDcComp = new Array(numComp);\n      const dctData = new Array(numComp);\n      const halfZigBlock = new Array(numComp);\n      const rowBlock = new Array(numComp);\n      const rowOffsets = new Array(numComp);\n\n      for (let comp = 0; comp < numComp; ++comp) {\n        rowOffsets[comp] = rowPtrs[cscSet.idx[comp]];\n        currDcComp[comp] = comp < 1 ? 0 : currDcComp[comp - 1] + numBlocksX * numBlocksY;\n        dctData[comp] = new Float32Array(64);\n        halfZigBlock[comp] = new Uint16Array(64);\n        rowBlock[comp] = new Uint16Array(numBlocksX * 64);\n      }\n\n      for (let blocky = 0; blocky < numBlocksY; ++blocky) {\n        let maxY = 8;\n        if (blocky == numBlocksY - 1) maxY = leftoverY;\n        let maxX = 8;\n\n        for (let blockx = 0; blockx < numBlocksX; ++blockx) {\n          if (blockx == numBlocksX - 1) maxX = leftoverX;\n\n          for (let comp = 0; comp < numComp; ++comp) {\n            halfZigBlock[comp].fill(0); // set block DC component\n\n            halfZigBlock[comp][0] = dcBuffer[currDcComp[comp]++]; // set block AC components\n\n            unRleAC(currAcComp, acBuffer, halfZigBlock[comp]); // UnZigZag block to float\n\n            unZigZag(halfZigBlock[comp], dctData[comp]); // decode float dct\n\n            dctInverse(dctData[comp]);\n          }\n\n          if (numComp == 3) {\n            csc709Inverse(dctData);\n          }\n\n          for (let comp = 0; comp < numComp; ++comp) {\n            convertToHalf(dctData[comp], rowBlock[comp], blockx * 64);\n          }\n        } // blockx\n\n\n        let offset = 0;\n\n        for (let comp = 0; comp < numComp; ++comp) {\n          const type = channelData[cscSet.idx[comp]].type;\n\n          for (let y = 8 * blocky; y < 8 * blocky + maxY; ++y) {\n            offset = rowOffsets[comp][y];\n\n            for (let blockx = 0; blockx < numFullBlocksX; ++blockx) {\n              const src = blockx * 64 + (y & 0x7) * 8;\n              dataView.setUint16(offset + 0 * INT16_SIZE * type, rowBlock[comp][src + 0], true);\n              dataView.setUint16(offset + 1 * INT16_SIZE * type, rowBlock[comp][src + 1], true);\n              dataView.setUint16(offset + 2 * INT16_SIZE * type, rowBlock[comp][src + 2], true);\n              dataView.setUint16(offset + 3 * INT16_SIZE * type, rowBlock[comp][src + 3], true);\n              dataView.setUint16(offset + 4 * INT16_SIZE * type, rowBlock[comp][src + 4], true);\n              dataView.setUint16(offset + 5 * INT16_SIZE * type, rowBlock[comp][src + 5], true);\n              dataView.setUint16(offset + 6 * INT16_SIZE * type, rowBlock[comp][src + 6], true);\n              dataView.setUint16(offset + 7 * INT16_SIZE * type, rowBlock[comp][src + 7], true);\n              offset += 8 * INT16_SIZE * type;\n            }\n          } // handle partial X blocks\n\n\n          if (numFullBlocksX != numBlocksX) {\n            for (let y = 8 * blocky; y < 8 * blocky + maxY; ++y) {\n              const offset = rowOffsets[comp][y] + 8 * numFullBlocksX * INT16_SIZE * type;\n              const src = numFullBlocksX * 64 + (y & 0x7) * 8;\n\n              for (let x = 0; x < maxX; ++x) {\n                dataView.setUint16(offset + x * INT16_SIZE * type, rowBlock[comp][src + x], true);\n              }\n            }\n          }\n        } // comp\n\n      } // blocky\n\n\n      const halfRow = new Uint16Array(width);\n      dataView = new DataView(outBuffer.buffer); // convert channels back to float, if needed\n\n      for (let comp = 0; comp < numComp; ++comp) {\n        channelData[cscSet.idx[comp]].decoded = true;\n        const type = channelData[cscSet.idx[comp]].type;\n        if (channelData[comp].type != 2) continue;\n\n        for (let y = 0; y < height; ++y) {\n          const offset = rowOffsets[comp][y];\n\n          for (let x = 0; x < width; ++x) {\n            halfRow[x] = dataView.getUint16(offset + x * INT16_SIZE * type, true);\n          }\n\n          for (let x = 0; x < width; ++x) {\n            dataView.setFloat32(offset + x * INT16_SIZE * type, decodeFloat16(halfRow[x]), true);\n          }\n        }\n      }\n    }\n\n    function unRleAC(currAcComp, acBuffer, halfZigBlock) {\n      let acValue;\n      let dctComp = 1;\n\n      while (dctComp < 64) {\n        acValue = acBuffer[currAcComp.value];\n\n        if (acValue == 0xff00) {\n          dctComp = 64;\n        } else if (acValue >> 8 == 0xff) {\n          dctComp += acValue & 0xff;\n        } else {\n          halfZigBlock[dctComp] = acValue;\n          dctComp++;\n        }\n\n        currAcComp.value++;\n      }\n    }\n\n    function unZigZag(src, dst) {\n      dst[0] = decodeFloat16(src[0]);\n      dst[1] = decodeFloat16(src[1]);\n      dst[2] = decodeFloat16(src[5]);\n      dst[3] = decodeFloat16(src[6]);\n      dst[4] = decodeFloat16(src[14]);\n      dst[5] = decodeFloat16(src[15]);\n      dst[6] = decodeFloat16(src[27]);\n      dst[7] = decodeFloat16(src[28]);\n      dst[8] = decodeFloat16(src[2]);\n      dst[9] = decodeFloat16(src[4]);\n      dst[10] = decodeFloat16(src[7]);\n      dst[11] = decodeFloat16(src[13]);\n      dst[12] = decodeFloat16(src[16]);\n      dst[13] = decodeFloat16(src[26]);\n      dst[14] = decodeFloat16(src[29]);\n      dst[15] = decodeFloat16(src[42]);\n      dst[16] = decodeFloat16(src[3]);\n      dst[17] = decodeFloat16(src[8]);\n      dst[18] = decodeFloat16(src[12]);\n      dst[19] = decodeFloat16(src[17]);\n      dst[20] = decodeFloat16(src[25]);\n      dst[21] = decodeFloat16(src[30]);\n      dst[22] = decodeFloat16(src[41]);\n      dst[23] = decodeFloat16(src[43]);\n      dst[24] = decodeFloat16(src[9]);\n      dst[25] = decodeFloat16(src[11]);\n      dst[26] = decodeFloat16(src[18]);\n      dst[27] = decodeFloat16(src[24]);\n      dst[28] = decodeFloat16(src[31]);\n      dst[29] = decodeFloat16(src[40]);\n      dst[30] = decodeFloat16(src[44]);\n      dst[31] = decodeFloat16(src[53]);\n      dst[32] = decodeFloat16(src[10]);\n      dst[33] = decodeFloat16(src[19]);\n      dst[34] = decodeFloat16(src[23]);\n      dst[35] = decodeFloat16(src[32]);\n      dst[36] = decodeFloat16(src[39]);\n      dst[37] = decodeFloat16(src[45]);\n      dst[38] = decodeFloat16(src[52]);\n      dst[39] = decodeFloat16(src[54]);\n      dst[40] = decodeFloat16(src[20]);\n      dst[41] = decodeFloat16(src[22]);\n      dst[42] = decodeFloat16(src[33]);\n      dst[43] = decodeFloat16(src[38]);\n      dst[44] = decodeFloat16(src[46]);\n      dst[45] = decodeFloat16(src[51]);\n      dst[46] = decodeFloat16(src[55]);\n      dst[47] = decodeFloat16(src[60]);\n      dst[48] = decodeFloat16(src[21]);\n      dst[49] = decodeFloat16(src[34]);\n      dst[50] = decodeFloat16(src[37]);\n      dst[51] = decodeFloat16(src[47]);\n      dst[52] = decodeFloat16(src[50]);\n      dst[53] = decodeFloat16(src[56]);\n      dst[54] = decodeFloat16(src[59]);\n      dst[55] = decodeFloat16(src[61]);\n      dst[56] = decodeFloat16(src[35]);\n      dst[57] = decodeFloat16(src[36]);\n      dst[58] = decodeFloat16(src[48]);\n      dst[59] = decodeFloat16(src[49]);\n      dst[60] = decodeFloat16(src[57]);\n      dst[61] = decodeFloat16(src[58]);\n      dst[62] = decodeFloat16(src[62]);\n      dst[63] = decodeFloat16(src[63]);\n    }\n\n    function dctInverse(data) {\n      const a = 0.5 * Math.cos(3.14159 / 4.0);\n      const b = 0.5 * Math.cos(3.14159 / 16.0);\n      const c = 0.5 * Math.cos(3.14159 / 8.0);\n      const d = 0.5 * Math.cos(3.0 * 3.14159 / 16.0);\n      const e = 0.5 * Math.cos(5.0 * 3.14159 / 16.0);\n      const f = 0.5 * Math.cos(3.0 * 3.14159 / 8.0);\n      const g = 0.5 * Math.cos(7.0 * 3.14159 / 16.0);\n      const alpha = new Array(4);\n      const beta = new Array(4);\n      const theta = new Array(4);\n      const gamma = new Array(4);\n\n      for (let row = 0; row < 8; ++row) {\n        const rowPtr = row * 8;\n        alpha[0] = c * data[rowPtr + 2];\n        alpha[1] = f * data[rowPtr + 2];\n        alpha[2] = c * data[rowPtr + 6];\n        alpha[3] = f * data[rowPtr + 6];\n        beta[0] = b * data[rowPtr + 1] + d * data[rowPtr + 3] + e * data[rowPtr + 5] + g * data[rowPtr + 7];\n        beta[1] = d * data[rowPtr + 1] - g * data[rowPtr + 3] - b * data[rowPtr + 5] - e * data[rowPtr + 7];\n        beta[2] = e * data[rowPtr + 1] - b * data[rowPtr + 3] + g * data[rowPtr + 5] + d * data[rowPtr + 7];\n        beta[3] = g * data[rowPtr + 1] - e * data[rowPtr + 3] + d * data[rowPtr + 5] - b * data[rowPtr + 7];\n        theta[0] = a * (data[rowPtr + 0] + data[rowPtr + 4]);\n        theta[3] = a * (data[rowPtr + 0] - data[rowPtr + 4]);\n        theta[1] = alpha[0] + alpha[3];\n        theta[2] = alpha[1] - alpha[2];\n        gamma[0] = theta[0] + theta[1];\n        gamma[1] = theta[3] + theta[2];\n        gamma[2] = theta[3] - theta[2];\n        gamma[3] = theta[0] - theta[1];\n        data[rowPtr + 0] = gamma[0] + beta[0];\n        data[rowPtr + 1] = gamma[1] + beta[1];\n        data[rowPtr + 2] = gamma[2] + beta[2];\n        data[rowPtr + 3] = gamma[3] + beta[3];\n        data[rowPtr + 4] = gamma[3] - beta[3];\n        data[rowPtr + 5] = gamma[2] - beta[2];\n        data[rowPtr + 6] = gamma[1] - beta[1];\n        data[rowPtr + 7] = gamma[0] - beta[0];\n      }\n\n      for (let column = 0; column < 8; ++column) {\n        alpha[0] = c * data[16 + column];\n        alpha[1] = f * data[16 + column];\n        alpha[2] = c * data[48 + column];\n        alpha[3] = f * data[48 + column];\n        beta[0] = b * data[8 + column] + d * data[24 + column] + e * data[40 + column] + g * data[56 + column];\n        beta[1] = d * data[8 + column] - g * data[24 + column] - b * data[40 + column] - e * data[56 + column];\n        beta[2] = e * data[8 + column] - b * data[24 + column] + g * data[40 + column] + d * data[56 + column];\n        beta[3] = g * data[8 + column] - e * data[24 + column] + d * data[40 + column] - b * data[56 + column];\n        theta[0] = a * (data[column] + data[32 + column]);\n        theta[3] = a * (data[column] - data[32 + column]);\n        theta[1] = alpha[0] + alpha[3];\n        theta[2] = alpha[1] - alpha[2];\n        gamma[0] = theta[0] + theta[1];\n        gamma[1] = theta[3] + theta[2];\n        gamma[2] = theta[3] - theta[2];\n        gamma[3] = theta[0] - theta[1];\n        data[0 + column] = gamma[0] + beta[0];\n        data[8 + column] = gamma[1] + beta[1];\n        data[16 + column] = gamma[2] + beta[2];\n        data[24 + column] = gamma[3] + beta[3];\n        data[32 + column] = gamma[3] - beta[3];\n        data[40 + column] = gamma[2] - beta[2];\n        data[48 + column] = gamma[1] - beta[1];\n        data[56 + column] = gamma[0] - beta[0];\n      }\n    }\n\n    function csc709Inverse(data) {\n      for (let i = 0; i < 64; ++i) {\n        const y = data[0][i];\n        const cb = data[1][i];\n        const cr = data[2][i];\n        data[0][i] = y + 1.5747 * cr;\n        data[1][i] = y - 0.1873 * cb - 0.4682 * cr;\n        data[2][i] = y + 1.8556 * cb;\n      }\n    }\n\n    function convertToHalf(src, dst, idx) {\n      for (let i = 0; i < 64; ++i) {\n        dst[idx + i] = DataUtils.toHalfFloat(toLinear(src[i]));\n      }\n    }\n\n    function toLinear(float) {\n      if (float <= 1) {\n        return Math.sign(float) * Math.pow(Math.abs(float), 2.2);\n      } else {\n        return Math.sign(float) * Math.pow(logBase, Math.abs(float) - 1.0);\n      }\n    }\n\n    function uncompressRAW(info) {\n      return new DataView(info.array.buffer, info.offset.value, info.size);\n    }\n\n    function uncompressRLE(info) {\n      const compressed = info.viewer.buffer.slice(info.offset.value, info.offset.value + info.size);\n      const rawBuffer = new Uint8Array(decodeRunLength(compressed));\n      const tmpBuffer = new Uint8Array(rawBuffer.length);\n      predictor(rawBuffer); // revert predictor\n\n      interleaveScalar(rawBuffer, tmpBuffer); // interleave pixels\n\n      return new DataView(tmpBuffer.buffer);\n    }\n\n    function uncompressZIP(info) {\n      const compressed = info.array.slice(info.offset.value, info.offset.value + info.size);\n\n      if (typeof fflate === 'undefined') {\n        console.error('THREE.EXRLoader: External library fflate.min.js required.');\n      }\n\n      const rawBuffer = fflate.unzlibSync(compressed); // eslint-disable-line no-undef\n\n      const tmpBuffer = new Uint8Array(rawBuffer.length);\n      predictor(rawBuffer); // revert predictor\n\n      interleaveScalar(rawBuffer, tmpBuffer); // interleave pixels\n\n      return new DataView(tmpBuffer.buffer);\n    }\n\n    function uncompressPIZ(info) {\n      const inDataView = info.viewer;\n      const inOffset = {\n        value: info.offset.value\n      };\n      const outBuffer = new Uint16Array(info.width * info.scanlineBlockSize * (info.channels * info.type));\n      const bitmap = new Uint8Array(BITMAP_SIZE); // Setup channel info\n\n      let outBufferEnd = 0;\n      const pizChannelData = new Array(info.channels);\n\n      for (let i = 0; i < info.channels; i++) {\n        pizChannelData[i] = {};\n        pizChannelData[i]['start'] = outBufferEnd;\n        pizChannelData[i]['end'] = pizChannelData[i]['start'];\n        pizChannelData[i]['nx'] = info.width;\n        pizChannelData[i]['ny'] = info.lines;\n        pizChannelData[i]['size'] = info.type;\n        outBufferEnd += pizChannelData[i].nx * pizChannelData[i].ny * pizChannelData[i].size;\n      } // Read range compression data\n\n\n      const minNonZero = parseUint16(inDataView, inOffset);\n      const maxNonZero = parseUint16(inDataView, inOffset);\n\n      if (maxNonZero >= BITMAP_SIZE) {\n        throw new Error('Something is wrong with PIZ_COMPRESSION BITMAP_SIZE');\n      }\n\n      if (minNonZero <= maxNonZero) {\n        for (let i = 0; i < maxNonZero - minNonZero + 1; i++) {\n          bitmap[i + minNonZero] = parseUint8(inDataView, inOffset);\n        }\n      } // Reverse LUT\n\n\n      const lut = new Uint16Array(USHORT_RANGE);\n      const maxValue = reverseLutFromBitmap(bitmap, lut);\n      const length = parseUint32(inDataView, inOffset); // Huffman decoding\n\n      hufUncompress(info.array, inDataView, inOffset, length, outBuffer, outBufferEnd); // Wavelet decoding\n\n      for (let i = 0; i < info.channels; ++i) {\n        const cd = pizChannelData[i];\n\n        for (let j = 0; j < pizChannelData[i].size; ++j) {\n          wav2Decode(outBuffer, cd.start + j, cd.nx, cd.size, cd.ny, cd.nx * cd.size, maxValue);\n        }\n      } // Expand the pixel data to their original range\n\n\n      applyLut(lut, outBuffer, outBufferEnd); // Rearrange the pixel data into the format expected by the caller.\n\n      let tmpOffset = 0;\n      const tmpBuffer = new Uint8Array(outBuffer.buffer.byteLength);\n\n      for (let y = 0; y < info.lines; y++) {\n        for (let c = 0; c < info.channels; c++) {\n          const cd = pizChannelData[c];\n          const n = cd.nx * cd.size;\n          const cp = new Uint8Array(outBuffer.buffer, cd.end * INT16_SIZE, n * INT16_SIZE);\n          tmpBuffer.set(cp, tmpOffset);\n          tmpOffset += n * INT16_SIZE;\n          cd.end += n;\n        }\n      }\n\n      return new DataView(tmpBuffer.buffer);\n    }\n\n    function uncompressPXR(info) {\n      const compressed = info.array.slice(info.offset.value, info.offset.value + info.size);\n\n      if (typeof fflate === 'undefined') {\n        console.error('THREE.EXRLoader: External library fflate.min.js required.');\n      }\n\n      const rawBuffer = fflate.unzlibSync(compressed); // eslint-disable-line no-undef\n\n      const sz = info.lines * info.channels * info.width;\n      const tmpBuffer = info.type == 1 ? new Uint16Array(sz) : new Uint32Array(sz);\n      let tmpBufferEnd = 0;\n      let writePtr = 0;\n      const ptr = new Array(4);\n\n      for (let y = 0; y < info.lines; y++) {\n        for (let c = 0; c < info.channels; c++) {\n          let pixel = 0;\n\n          switch (info.type) {\n            case 1:\n              ptr[0] = tmpBufferEnd;\n              ptr[1] = ptr[0] + info.width;\n              tmpBufferEnd = ptr[1] + info.width;\n\n              for (let j = 0; j < info.width; ++j) {\n                const diff = rawBuffer[ptr[0]++] << 8 | rawBuffer[ptr[1]++];\n                pixel += diff;\n                tmpBuffer[writePtr] = pixel;\n                writePtr++;\n              }\n\n              break;\n\n            case 2:\n              ptr[0] = tmpBufferEnd;\n              ptr[1] = ptr[0] + info.width;\n              ptr[2] = ptr[1] + info.width;\n              tmpBufferEnd = ptr[2] + info.width;\n\n              for (let j = 0; j < info.width; ++j) {\n                const diff = rawBuffer[ptr[0]++] << 24 | rawBuffer[ptr[1]++] << 16 | rawBuffer[ptr[2]++] << 8;\n                pixel += diff;\n                tmpBuffer[writePtr] = pixel;\n                writePtr++;\n              }\n\n              break;\n          }\n        }\n      }\n\n      return new DataView(tmpBuffer.buffer);\n    }\n\n    function uncompressDWA(info) {\n      const inDataView = info.viewer;\n      const inOffset = {\n        value: info.offset.value\n      };\n      const outBuffer = new Uint8Array(info.width * info.lines * (info.channels * info.type * INT16_SIZE)); // Read compression header information\n\n      const dwaHeader = {\n        version: parseInt64(inDataView, inOffset),\n        unknownUncompressedSize: parseInt64(inDataView, inOffset),\n        unknownCompressedSize: parseInt64(inDataView, inOffset),\n        acCompressedSize: parseInt64(inDataView, inOffset),\n        dcCompressedSize: parseInt64(inDataView, inOffset),\n        rleCompressedSize: parseInt64(inDataView, inOffset),\n        rleUncompressedSize: parseInt64(inDataView, inOffset),\n        rleRawSize: parseInt64(inDataView, inOffset),\n        totalAcUncompressedCount: parseInt64(inDataView, inOffset),\n        totalDcUncompressedCount: parseInt64(inDataView, inOffset),\n        acCompression: parseInt64(inDataView, inOffset)\n      };\n      if (dwaHeader.version < 2) throw new Error('EXRLoader.parse: ' + EXRHeader.compression + ' version ' + dwaHeader.version + ' is unsupported'); // Read channel ruleset information\n\n      const channelRules = new Array();\n      let ruleSize = parseUint16(inDataView, inOffset) - INT16_SIZE;\n\n      while (ruleSize > 0) {\n        const name = parseNullTerminatedString(inDataView.buffer, inOffset);\n        const value = parseUint8(inDataView, inOffset);\n        const compression = value >> 2 & 3;\n        const csc = (value >> 4) - 1;\n        const index = new Int8Array([csc])[0];\n        const type = parseUint8(inDataView, inOffset);\n        channelRules.push({\n          name: name,\n          index: index,\n          type: type,\n          compression: compression\n        });\n        ruleSize -= name.length + 3;\n      } // Classify channels\n\n\n      const channels = EXRHeader.channels;\n      const channelData = new Array(info.channels);\n\n      for (let i = 0; i < info.channels; ++i) {\n        const cd = channelData[i] = {};\n        const channel = channels[i];\n        cd.name = channel.name;\n        cd.compression = UNKNOWN;\n        cd.decoded = false;\n        cd.type = channel.pixelType;\n        cd.pLinear = channel.pLinear;\n        cd.width = info.width;\n        cd.height = info.lines;\n      }\n\n      const cscSet = {\n        idx: new Array(3)\n      };\n\n      for (let offset = 0; offset < info.channels; ++offset) {\n        const cd = channelData[offset];\n\n        for (let i = 0; i < channelRules.length; ++i) {\n          const rule = channelRules[i];\n\n          if (cd.name == rule.name) {\n            cd.compression = rule.compression;\n\n            if (rule.index >= 0) {\n              cscSet.idx[rule.index] = offset;\n            }\n\n            cd.offset = offset;\n          }\n        }\n      }\n\n      let acBuffer, dcBuffer, rleBuffer; // Read DCT - AC component data\n\n      if (dwaHeader.acCompressedSize > 0) {\n        switch (dwaHeader.acCompression) {\n          case STATIC_HUFFMAN:\n            acBuffer = new Uint16Array(dwaHeader.totalAcUncompressedCount);\n            hufUncompress(info.array, inDataView, inOffset, dwaHeader.acCompressedSize, acBuffer, dwaHeader.totalAcUncompressedCount);\n            break;\n\n          case DEFLATE:\n            const compressed = info.array.slice(inOffset.value, inOffset.value + dwaHeader.totalAcUncompressedCount);\n            const data = fflate.unzlibSync(compressed); // eslint-disable-line no-undef\n\n            acBuffer = new Uint16Array(data.buffer);\n            inOffset.value += dwaHeader.totalAcUncompressedCount;\n            break;\n        }\n      } // Read DCT - DC component data\n\n\n      if (dwaHeader.dcCompressedSize > 0) {\n        const zlibInfo = {\n          array: info.array,\n          offset: inOffset,\n          size: dwaHeader.dcCompressedSize\n        };\n        dcBuffer = new Uint16Array(uncompressZIP(zlibInfo).buffer);\n        inOffset.value += dwaHeader.dcCompressedSize;\n      } // Read RLE compressed data\n\n\n      if (dwaHeader.rleRawSize > 0) {\n        const compressed = info.array.slice(inOffset.value, inOffset.value + dwaHeader.rleCompressedSize);\n        const data = fflate.unzlibSync(compressed); // eslint-disable-line no-undef\n\n        rleBuffer = decodeRunLength(data.buffer);\n        inOffset.value += dwaHeader.rleCompressedSize;\n      } // Prepare outbuffer data offset\n\n\n      let outBufferEnd = 0;\n      const rowOffsets = new Array(channelData.length);\n\n      for (let i = 0; i < rowOffsets.length; ++i) {\n        rowOffsets[i] = new Array();\n      }\n\n      for (let y = 0; y < info.lines; ++y) {\n        for (let chan = 0; chan < channelData.length; ++chan) {\n          rowOffsets[chan].push(outBufferEnd);\n          outBufferEnd += channelData[chan].width * info.type * INT16_SIZE;\n        }\n      } // Lossy DCT decode RGB channels\n\n\n      lossyDctDecode(cscSet, rowOffsets, channelData, acBuffer, dcBuffer, outBuffer); // Decode other channels\n\n      for (let i = 0; i < channelData.length; ++i) {\n        const cd = channelData[i];\n        if (cd.decoded) continue;\n\n        switch (cd.compression) {\n          case RLE:\n            let row = 0;\n            let rleOffset = 0;\n\n            for (let y = 0; y < info.lines; ++y) {\n              let rowOffsetBytes = rowOffsets[i][row];\n\n              for (let x = 0; x < cd.width; ++x) {\n                for (let byte = 0; byte < INT16_SIZE * cd.type; ++byte) {\n                  outBuffer[rowOffsetBytes++] = rleBuffer[rleOffset + byte * cd.width * cd.height];\n                }\n\n                rleOffset++;\n              }\n\n              row++;\n            }\n\n            break;\n\n          case LOSSY_DCT: // skip\n\n          default:\n            throw new Error('EXRLoader.parse: unsupported channel compression');\n        }\n      }\n\n      return new DataView(outBuffer.buffer);\n    }\n\n    function parseNullTerminatedString(buffer, offset) {\n      const uintBuffer = new Uint8Array(buffer);\n      let endOffset = 0;\n\n      while (uintBuffer[offset.value + endOffset] != 0) {\n        endOffset += 1;\n      }\n\n      const stringValue = new TextDecoder().decode(uintBuffer.slice(offset.value, offset.value + endOffset));\n      offset.value = offset.value + endOffset + 1;\n      return stringValue;\n    }\n\n    function parseFixedLengthString(buffer, offset, size) {\n      const stringValue = new TextDecoder().decode(new Uint8Array(buffer).slice(offset.value, offset.value + size));\n      offset.value = offset.value + size;\n      return stringValue;\n    }\n\n    function parseRational(dataView, offset) {\n      const x = parseInt32(dataView, offset);\n      const y = parseUint32(dataView, offset);\n      return [x, y];\n    }\n\n    function parseTimecode(dataView, offset) {\n      const x = parseUint32(dataView, offset);\n      const y = parseUint32(dataView, offset);\n      return [x, y];\n    }\n\n    function parseInt32(dataView, offset) {\n      const Int32 = dataView.getInt32(offset.value, true);\n      offset.value = offset.value + INT32_SIZE;\n      return Int32;\n    }\n\n    function parseUint32(dataView, offset) {\n      const Uint32 = dataView.getUint32(offset.value, true);\n      offset.value = offset.value + INT32_SIZE;\n      return Uint32;\n    }\n\n    function parseUint8Array(uInt8Array, offset) {\n      const Uint8 = uInt8Array[offset.value];\n      offset.value = offset.value + INT8_SIZE;\n      return Uint8;\n    }\n\n    function parseUint8(dataView, offset) {\n      const Uint8 = dataView.getUint8(offset.value);\n      offset.value = offset.value + INT8_SIZE;\n      return Uint8;\n    }\n\n    const parseInt64 = function (dataView, offset) {\n      const Int64 = Number(dataView.getBigInt64(offset.value, true));\n      offset.value += ULONG_SIZE;\n      return Int64;\n    };\n\n    function parseFloat32(dataView, offset) {\n      const float = dataView.getFloat32(offset.value, true);\n      offset.value += FLOAT32_SIZE;\n      return float;\n    }\n\n    function decodeFloat32(dataView, offset) {\n      return DataUtils.toHalfFloat(parseFloat32(dataView, offset));\n    } // https://stackoverflow.com/questions/5678432/decompressing-half-precision-floats-in-javascript\n\n\n    function decodeFloat16(binary) {\n      const exponent = (binary & 0x7C00) >> 10,\n            fraction = binary & 0x03FF;\n      return (binary >> 15 ? -1 : 1) * (exponent ? exponent === 0x1F ? fraction ? NaN : Infinity : Math.pow(2, exponent - 15) * (1 + fraction / 0x400) : 6.103515625e-5 * (fraction / 0x400));\n    }\n\n    function parseUint16(dataView, offset) {\n      const Uint16 = dataView.getUint16(offset.value, true);\n      offset.value += INT16_SIZE;\n      return Uint16;\n    }\n\n    function parseFloat16(buffer, offset) {\n      return decodeFloat16(parseUint16(buffer, offset));\n    }\n\n    function parseChlist(dataView, buffer, offset, size) {\n      const startOffset = offset.value;\n      const channels = [];\n\n      while (offset.value < startOffset + size - 1) {\n        const name = parseNullTerminatedString(buffer, offset);\n        const pixelType = parseInt32(dataView, offset);\n        const pLinear = parseUint8(dataView, offset);\n        offset.value += 3; // reserved, three chars\n\n        const xSampling = parseInt32(dataView, offset);\n        const ySampling = parseInt32(dataView, offset);\n        channels.push({\n          name: name,\n          pixelType: pixelType,\n          pLinear: pLinear,\n          xSampling: xSampling,\n          ySampling: ySampling\n        });\n      }\n\n      offset.value += 1;\n      return channels;\n    }\n\n    function parseChromaticities(dataView, offset) {\n      const redX = parseFloat32(dataView, offset);\n      const redY = parseFloat32(dataView, offset);\n      const greenX = parseFloat32(dataView, offset);\n      const greenY = parseFloat32(dataView, offset);\n      const blueX = parseFloat32(dataView, offset);\n      const blueY = parseFloat32(dataView, offset);\n      const whiteX = parseFloat32(dataView, offset);\n      const whiteY = parseFloat32(dataView, offset);\n      return {\n        redX: redX,\n        redY: redY,\n        greenX: greenX,\n        greenY: greenY,\n        blueX: blueX,\n        blueY: blueY,\n        whiteX: whiteX,\n        whiteY: whiteY\n      };\n    }\n\n    function parseCompression(dataView, offset) {\n      const compressionCodes = ['NO_COMPRESSION', 'RLE_COMPRESSION', 'ZIPS_COMPRESSION', 'ZIP_COMPRESSION', 'PIZ_COMPRESSION', 'PXR24_COMPRESSION', 'B44_COMPRESSION', 'B44A_COMPRESSION', 'DWAA_COMPRESSION', 'DWAB_COMPRESSION'];\n      const compression = parseUint8(dataView, offset);\n      return compressionCodes[compression];\n    }\n\n    function parseBox2i(dataView, offset) {\n      const xMin = parseUint32(dataView, offset);\n      const yMin = parseUint32(dataView, offset);\n      const xMax = parseUint32(dataView, offset);\n      const yMax = parseUint32(dataView, offset);\n      return {\n        xMin: xMin,\n        yMin: yMin,\n        xMax: xMax,\n        yMax: yMax\n      };\n    }\n\n    function parseLineOrder(dataView, offset) {\n      const lineOrders = ['INCREASING_Y'];\n      const lineOrder = parseUint8(dataView, offset);\n      return lineOrders[lineOrder];\n    }\n\n    function parseV2f(dataView, offset) {\n      const x = parseFloat32(dataView, offset);\n      const y = parseFloat32(dataView, offset);\n      return [x, y];\n    }\n\n    function parseV3f(dataView, offset) {\n      const x = parseFloat32(dataView, offset);\n      const y = parseFloat32(dataView, offset);\n      const z = parseFloat32(dataView, offset);\n      return [x, y, z];\n    }\n\n    function parseValue(dataView, buffer, offset, type, size) {\n      if (type === 'string' || type === 'stringvector' || type === 'iccProfile') {\n        return parseFixedLengthString(buffer, offset, size);\n      } else if (type === 'chlist') {\n        return parseChlist(dataView, buffer, offset, size);\n      } else if (type === 'chromaticities') {\n        return parseChromaticities(dataView, offset);\n      } else if (type === 'compression') {\n        return parseCompression(dataView, offset);\n      } else if (type === 'box2i') {\n        return parseBox2i(dataView, offset);\n      } else if (type === 'lineOrder') {\n        return parseLineOrder(dataView, offset);\n      } else if (type === 'float') {\n        return parseFloat32(dataView, offset);\n      } else if (type === 'v2f') {\n        return parseV2f(dataView, offset);\n      } else if (type === 'v3f') {\n        return parseV3f(dataView, offset);\n      } else if (type === 'int') {\n        return parseInt32(dataView, offset);\n      } else if (type === 'rational') {\n        return parseRational(dataView, offset);\n      } else if (type === 'timecode') {\n        return parseTimecode(dataView, offset);\n      } else if (type === 'preview') {\n        offset.value += size;\n        return 'skipped';\n      } else {\n        offset.value += size;\n        return undefined;\n      }\n    }\n\n    function parseHeader(dataView, buffer, offset) {\n      const EXRHeader = {};\n\n      if (dataView.getUint32(0, true) != 20000630) {\n        // magic\n        throw new Error('THREE.EXRLoader: provided file doesn\\'t appear to be in OpenEXR format.');\n      }\n\n      EXRHeader.version = dataView.getUint8(4);\n      const spec = dataView.getUint8(5); // fullMask\n\n      EXRHeader.spec = {\n        singleTile: !!(spec & 2),\n        longName: !!(spec & 4),\n        deepFormat: !!(spec & 8),\n        multiPart: !!(spec & 16)\n      }; // start of header\n\n      offset.value = 8; // start at 8 - after pre-amble\n\n      let keepReading = true;\n\n      while (keepReading) {\n        const attributeName = parseNullTerminatedString(buffer, offset);\n\n        if (attributeName == 0) {\n          keepReading = false;\n        } else {\n          const attributeType = parseNullTerminatedString(buffer, offset);\n          const attributeSize = parseUint32(dataView, offset);\n          const attributeValue = parseValue(dataView, buffer, offset, attributeType, attributeSize);\n\n          if (attributeValue === undefined) {\n            console.warn(`EXRLoader.parse: skipped unknown header attribute type \\'${attributeType}\\'.`);\n          } else {\n            EXRHeader[attributeName] = attributeValue;\n          }\n        }\n      }\n\n      if ((spec & ~0x04) != 0) {\n        // unsupported tiled, deep-image, multi-part\n        console.error('EXRHeader:', EXRHeader);\n        throw new Error('THREE.EXRLoader: provided file is currently unsupported.');\n      }\n\n      return EXRHeader;\n    }\n\n    function setupDecoder(EXRHeader, dataView, uInt8Array, offset, outputType) {\n      const EXRDecoder = {\n        size: 0,\n        viewer: dataView,\n        array: uInt8Array,\n        offset: offset,\n        width: EXRHeader.dataWindow.xMax - EXRHeader.dataWindow.xMin + 1,\n        height: EXRHeader.dataWindow.yMax - EXRHeader.dataWindow.yMin + 1,\n        channels: EXRHeader.channels.length,\n        bytesPerLine: null,\n        lines: null,\n        inputSize: null,\n        type: EXRHeader.channels[0].pixelType,\n        uncompress: null,\n        getter: null,\n        format: null,\n        encoding: null\n      };\n\n      switch (EXRHeader.compression) {\n        case 'NO_COMPRESSION':\n          EXRDecoder.lines = 1;\n          EXRDecoder.uncompress = uncompressRAW;\n          break;\n\n        case 'RLE_COMPRESSION':\n          EXRDecoder.lines = 1;\n          EXRDecoder.uncompress = uncompressRLE;\n          break;\n\n        case 'ZIPS_COMPRESSION':\n          EXRDecoder.lines = 1;\n          EXRDecoder.uncompress = uncompressZIP;\n          break;\n\n        case 'ZIP_COMPRESSION':\n          EXRDecoder.lines = 16;\n          EXRDecoder.uncompress = uncompressZIP;\n          break;\n\n        case 'PIZ_COMPRESSION':\n          EXRDecoder.lines = 32;\n          EXRDecoder.uncompress = uncompressPIZ;\n          break;\n\n        case 'PXR24_COMPRESSION':\n          EXRDecoder.lines = 16;\n          EXRDecoder.uncompress = uncompressPXR;\n          break;\n\n        case 'DWAA_COMPRESSION':\n          EXRDecoder.lines = 32;\n          EXRDecoder.uncompress = uncompressDWA;\n          break;\n\n        case 'DWAB_COMPRESSION':\n          EXRDecoder.lines = 256;\n          EXRDecoder.uncompress = uncompressDWA;\n          break;\n\n        default:\n          throw new Error('EXRLoader.parse: ' + EXRHeader.compression + ' is unsupported');\n      }\n\n      EXRDecoder.scanlineBlockSize = EXRDecoder.lines;\n\n      if (EXRDecoder.type == 1) {\n        // half\n        switch (outputType) {\n          case FloatType:\n            EXRDecoder.getter = parseFloat16;\n            EXRDecoder.inputSize = INT16_SIZE;\n            break;\n\n          case HalfFloatType:\n            EXRDecoder.getter = parseUint16;\n            EXRDecoder.inputSize = INT16_SIZE;\n            break;\n        }\n      } else if (EXRDecoder.type == 2) {\n        // float\n        switch (outputType) {\n          case FloatType:\n            EXRDecoder.getter = parseFloat32;\n            EXRDecoder.inputSize = FLOAT32_SIZE;\n            break;\n\n          case HalfFloatType:\n            EXRDecoder.getter = decodeFloat32;\n            EXRDecoder.inputSize = FLOAT32_SIZE;\n        }\n      } else {\n        throw new Error('EXRLoader.parse: unsupported pixelType ' + EXRDecoder.type + ' for ' + EXRHeader.compression + '.');\n      }\n\n      EXRDecoder.blockCount = (EXRHeader.dataWindow.yMax + 1) / EXRDecoder.scanlineBlockSize;\n\n      for (let i = 0; i < EXRDecoder.blockCount; i++) parseInt64(dataView, offset); // scanlineOffset\n      // we should be passed the scanline offset table, ready to start reading pixel data.\n      // RGB images will be converted to RGBA format, preventing software emulation in select devices.\n\n\n      EXRDecoder.outputChannels = EXRDecoder.channels == 3 ? 4 : EXRDecoder.channels;\n      const size = EXRDecoder.width * EXRDecoder.height * EXRDecoder.outputChannels;\n\n      switch (outputType) {\n        case FloatType:\n          EXRDecoder.byteArray = new Float32Array(size); // Fill initially with 1s for the alpha value if the texture is not RGBA, RGB values will be overwritten\n\n          if (EXRDecoder.channels < EXRDecoder.outputChannels) EXRDecoder.byteArray.fill(1, 0, size);\n          break;\n\n        case HalfFloatType:\n          EXRDecoder.byteArray = new Uint16Array(size);\n          if (EXRDecoder.channels < EXRDecoder.outputChannels) EXRDecoder.byteArray.fill(0x3C00, 0, size); // Uint16Array holds half float data, 0x3C00 is 1\n\n          break;\n\n        default:\n          console.error('THREE.EXRLoader: unsupported type: ', outputType);\n          break;\n      }\n\n      EXRDecoder.bytesPerLine = EXRDecoder.width * EXRDecoder.inputSize * EXRDecoder.channels;\n\n      if (EXRDecoder.outputChannels == 4) {\n        EXRDecoder.format = RGBAFormat;\n        EXRDecoder.encoding = LinearEncoding;\n      } else {\n        EXRDecoder.format = RedFormat;\n        EXRDecoder.encoding = LinearEncoding;\n      }\n\n      return EXRDecoder;\n    } // start parsing file [START]\n\n\n    const bufferDataView = new DataView(buffer);\n    const uInt8Array = new Uint8Array(buffer);\n    const offset = {\n      value: 0\n    }; // get header information and validate format.\n\n    const EXRHeader = parseHeader(bufferDataView, buffer, offset); // get input compression information and prepare decoding.\n\n    const EXRDecoder = setupDecoder(EXRHeader, bufferDataView, uInt8Array, offset, this.type);\n    const tmpOffset = {\n      value: 0\n    };\n    const channelOffsets = {\n      R: 0,\n      G: 1,\n      B: 2,\n      A: 3,\n      Y: 0\n    };\n\n    for (let scanlineBlockIdx = 0; scanlineBlockIdx < EXRDecoder.height / EXRDecoder.scanlineBlockSize; scanlineBlockIdx++) {\n      const line = parseUint32(bufferDataView, offset); // line_no\n\n      EXRDecoder.size = parseUint32(bufferDataView, offset); // data_len\n\n      EXRDecoder.lines = line + EXRDecoder.scanlineBlockSize > EXRDecoder.height ? EXRDecoder.height - line : EXRDecoder.scanlineBlockSize;\n      const isCompressed = EXRDecoder.size < EXRDecoder.lines * EXRDecoder.bytesPerLine;\n      const viewer = isCompressed ? EXRDecoder.uncompress(EXRDecoder) : uncompressRAW(EXRDecoder);\n      offset.value += EXRDecoder.size;\n\n      for (let line_y = 0; line_y < EXRDecoder.scanlineBlockSize; line_y++) {\n        const true_y = line_y + scanlineBlockIdx * EXRDecoder.scanlineBlockSize;\n        if (true_y >= EXRDecoder.height) break;\n\n        for (let channelID = 0; channelID < EXRDecoder.channels; channelID++) {\n          const cOff = channelOffsets[EXRHeader.channels[channelID].name];\n\n          for (let x = 0; x < EXRDecoder.width; x++) {\n            tmpOffset.value = (line_y * (EXRDecoder.channels * EXRDecoder.width) + channelID * EXRDecoder.width + x) * EXRDecoder.inputSize;\n            const outIndex = (EXRDecoder.height - 1 - true_y) * (EXRDecoder.width * EXRDecoder.outputChannels) + x * EXRDecoder.outputChannels + cOff;\n            EXRDecoder.byteArray[outIndex] = EXRDecoder.getter(viewer, tmpOffset);\n          }\n        }\n      }\n    }\n\n    return {\n      header: EXRHeader,\n      width: EXRDecoder.width,\n      height: EXRDecoder.height,\n      data: EXRDecoder.byteArray,\n      format: EXRDecoder.format,\n      encoding: EXRDecoder.encoding,\n      type: this.type\n    };\n  }\n\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      texture.encoding = texData.encoding;\n      texture.minFilter = LinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.flipY = false;\n      if (onLoad) onLoad(texture, texData);\n    }\n\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n\n}\n\nexport { EXRLoader };","map":{"version":3,"names":["DataTextureLoader","DataUtils","FloatType","HalfFloatType","LinearEncoding","LinearFilter","RedFormat","RGBAFormat","fflate","EXRLoader","constructor","manager","type","parse","buffer","USHORT_RANGE","BITMAP_SIZE","HUF_ENCBITS","HUF_DECBITS","HUF_ENCSIZE","HUF_DECSIZE","HUF_DECMASK","NBITS","A_OFFSET","MOD_MASK","SHORT_ZEROCODE_RUN","LONG_ZEROCODE_RUN","SHORTEST_LONG_RUN","ULONG_SIZE","FLOAT32_SIZE","INT32_SIZE","INT16_SIZE","INT8_SIZE","STATIC_HUFFMAN","DEFLATE","UNKNOWN","LOSSY_DCT","RLE","logBase","Math","pow","reverseLutFromBitmap","bitmap","lut","k","i","n","hufClearDecTable","hdec","len","lit","p","getBitsReturn","l","c","lc","getBits","nBits","uInt8Array","inOffset","parseUint8Array","hufTableBuffer","Array","hufCanonicalCodeTable","hcode","nc","hufUnpackEncTable","ni","im","iM","value","Error","zerun","hufLength","code","hufCode","hufBuildDecTable","hdecod","pl","plOffset","getCharReturn","getChar","getCodeReturn","getCode","po","rlc","outBuffer","outBufferOffset","outBufferEndOffset","cs","Uint8Array","s","UInt16","Int16","ref","wdec14Return","a","b","wdec14","h","ls","hs","hi","ai","as","bs","wdec16","m","d","bb","aa","wav2Decode","j","nx","ox","ny","oy","mx","w14","p2","py","ey","oy1","oy2","ox1","ox2","i00","i01","i10","i11","px","ex","p01","p10","p11","hufDecode","encodingTable","decodingTable","no","outOffset","inOffsetEnd","trunc","index","hufUncompress","inDataView","nCompressed","nRaw","initialInOffset","parseUint32","freq","applyLut","data","nData","predictor","source","t","length","interleaveScalar","out","t1","t2","floor","stop","decodeRunLength","size","byteLength","reader","DataView","getInt8","count","push","getUint8","lossyDctDecode","cscSet","rowPtrs","channelData","acBuffer","dcBuffer","dataView","width","idx","height","numComp","numFullBlocksX","numBlocksX","ceil","numBlocksY","leftoverX","leftoverY","currAcComp","currDcComp","dctData","halfZigBlock","rowBlock","rowOffsets","comp","Float32Array","Uint16Array","blocky","maxY","maxX","blockx","fill","unRleAC","unZigZag","dctInverse","csc709Inverse","convertToHalf","offset","y","src","setUint16","x","halfRow","decoded","getUint16","setFloat32","decodeFloat16","acValue","dctComp","dst","cos","e","f","g","alpha","beta","theta","gamma","row","rowPtr","column","cb","cr","toHalfFloat","toLinear","float","sign","abs","uncompressRAW","info","array","uncompressRLE","compressed","viewer","slice","rawBuffer","tmpBuffer","uncompressZIP","console","error","unzlibSync","uncompressPIZ","scanlineBlockSize","channels","outBufferEnd","pizChannelData","lines","minNonZero","parseUint16","maxNonZero","parseUint8","maxValue","cd","start","tmpOffset","cp","end","set","uncompressPXR","sz","Uint32Array","tmpBufferEnd","writePtr","ptr","pixel","diff","uncompressDWA","dwaHeader","version","parseInt64","unknownUncompressedSize","unknownCompressedSize","acCompressedSize","dcCompressedSize","rleCompressedSize","rleUncompressedSize","rleRawSize","totalAcUncompressedCount","totalDcUncompressedCount","acCompression","EXRHeader","compression","channelRules","ruleSize","name","parseNullTerminatedString","csc","Int8Array","channel","pixelType","pLinear","rule","rleBuffer","zlibInfo","chan","rleOffset","rowOffsetBytes","byte","uintBuffer","endOffset","stringValue","TextDecoder","decode","parseFixedLengthString","parseRational","parseInt32","parseTimecode","Int32","getInt32","Uint32","getUint32","Uint8","Int64","Number","getBigInt64","parseFloat32","getFloat32","decodeFloat32","binary","exponent","fraction","NaN","Infinity","Uint16","parseFloat16","parseChlist","startOffset","xSampling","ySampling","parseChromaticities","redX","redY","greenX","greenY","blueX","blueY","whiteX","whiteY","parseCompression","compressionCodes","parseBox2i","xMin","yMin","xMax","yMax","parseLineOrder","lineOrders","lineOrder","parseV2f","parseV3f","z","parseValue","undefined","parseHeader","spec","singleTile","longName","deepFormat","multiPart","keepReading","attributeName","attributeType","attributeSize","attributeValue","warn","setupDecoder","outputType","EXRDecoder","dataWindow","bytesPerLine","inputSize","uncompress","getter","format","encoding","blockCount","outputChannels","byteArray","bufferDataView","channelOffsets","R","G","B","A","Y","scanlineBlockIdx","line","isCompressed","line_y","true_y","channelID","cOff","outIndex","header","setDataType","load","url","onLoad","onProgress","onError","onLoadCallback","texture","texData","minFilter","magFilter","generateMipmaps","flipY"],"sources":["/home/anoo/Documents/React/Three-js/three-js/node_modules/three/examples/jsm/loaders/EXRLoader.js"],"sourcesContent":["import {\n\tDataTextureLoader,\n\tDataUtils,\n\tFloatType,\n\tHalfFloatType,\n\tLinearEncoding,\n\tLinearFilter,\n\tRedFormat,\n\tRGBAFormat\n} from 'three';\nimport * as fflate from '../libs/fflate.module.js';\n\n/**\n * OpenEXR loader currently supports uncompressed, ZIP(S), RLE, PIZ and DWA/B compression.\n * Supports reading as UnsignedByte, HalfFloat and Float type data texture.\n *\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation, so I have preserved their copyright notices.\n */\n\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n\n// // End of OpenEXR license -------------------------------------------------\n\nclass EXRLoader extends DataTextureLoader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.type = HalfFloatType;\n\n\t}\n\n\tparse( buffer ) {\n\n\t\tconst USHORT_RANGE = ( 1 << 16 );\n\t\tconst BITMAP_SIZE = ( USHORT_RANGE >> 3 );\n\n\t\tconst HUF_ENCBITS = 16; // literal (value) bit length\n\t\tconst HUF_DECBITS = 14; // decoding bit size (>= 8)\n\n\t\tconst HUF_ENCSIZE = ( 1 << HUF_ENCBITS ) + 1; // encoding table size\n\t\tconst HUF_DECSIZE = 1 << HUF_DECBITS; // decoding table size\n\t\tconst HUF_DECMASK = HUF_DECSIZE - 1;\n\n\t\tconst NBITS = 16;\n\t\tconst A_OFFSET = 1 << ( NBITS - 1 );\n\t\tconst MOD_MASK = ( 1 << NBITS ) - 1;\n\n\t\tconst SHORT_ZEROCODE_RUN = 59;\n\t\tconst LONG_ZEROCODE_RUN = 63;\n\t\tconst SHORTEST_LONG_RUN = 2 + LONG_ZEROCODE_RUN - SHORT_ZEROCODE_RUN;\n\n\t\tconst ULONG_SIZE = 8;\n\t\tconst FLOAT32_SIZE = 4;\n\t\tconst INT32_SIZE = 4;\n\t\tconst INT16_SIZE = 2;\n\t\tconst INT8_SIZE = 1;\n\n\t\tconst STATIC_HUFFMAN = 0;\n\t\tconst DEFLATE = 1;\n\n\t\tconst UNKNOWN = 0;\n\t\tconst LOSSY_DCT = 1;\n\t\tconst RLE = 2;\n\n\t\tconst logBase = Math.pow( 2.7182818, 2.2 );\n\n\t\tfunction reverseLutFromBitmap( bitmap, lut ) {\n\n\t\t\tlet k = 0;\n\n\t\t\tfor ( let i = 0; i < USHORT_RANGE; ++ i ) {\n\n\t\t\t\tif ( ( i == 0 ) || ( bitmap[ i >> 3 ] & ( 1 << ( i & 7 ) ) ) ) {\n\n\t\t\t\t\tlut[ k ++ ] = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst n = k - 1;\n\n\t\t\twhile ( k < USHORT_RANGE ) lut[ k ++ ] = 0;\n\n\t\t\treturn n;\n\n\t\t}\n\n\t\tfunction hufClearDecTable( hdec ) {\n\n\t\t\tfor ( let i = 0; i < HUF_DECSIZE; i ++ ) {\n\n\t\t\t\thdec[ i ] = {};\n\t\t\t\thdec[ i ].len = 0;\n\t\t\t\thdec[ i ].lit = 0;\n\t\t\t\thdec[ i ].p = null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst getBitsReturn = { l: 0, c: 0, lc: 0 };\n\n\t\tfunction getBits( nBits, c, lc, uInt8Array, inOffset ) {\n\n\t\t\twhile ( lc < nBits ) {\n\n\t\t\t\tc = ( c << 8 ) | parseUint8Array( uInt8Array, inOffset );\n\t\t\t\tlc += 8;\n\n\t\t\t}\n\n\t\t\tlc -= nBits;\n\n\t\t\tgetBitsReturn.l = ( c >> lc ) & ( ( 1 << nBits ) - 1 );\n\t\t\tgetBitsReturn.c = c;\n\t\t\tgetBitsReturn.lc = lc;\n\n\t\t}\n\n\t\tconst hufTableBuffer = new Array( 59 );\n\n\t\tfunction hufCanonicalCodeTable( hcode ) {\n\n\t\t\tfor ( let i = 0; i <= 58; ++ i ) hufTableBuffer[ i ] = 0;\n\t\t\tfor ( let i = 0; i < HUF_ENCSIZE; ++ i ) hufTableBuffer[ hcode[ i ] ] += 1;\n\n\t\t\tlet c = 0;\n\n\t\t\tfor ( let i = 58; i > 0; -- i ) {\n\n\t\t\t\tconst nc = ( ( c + hufTableBuffer[ i ] ) >> 1 );\n\t\t\t\thufTableBuffer[ i ] = c;\n\t\t\t\tc = nc;\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < HUF_ENCSIZE; ++ i ) {\n\n\t\t\t\tconst l = hcode[ i ];\n\t\t\t\tif ( l > 0 ) hcode[ i ] = l | ( hufTableBuffer[ l ] ++ << 6 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction hufUnpackEncTable( uInt8Array, inOffset, ni, im, iM, hcode ) {\n\n\t\t\tconst p = inOffset;\n\t\t\tlet c = 0;\n\t\t\tlet lc = 0;\n\n\t\t\tfor ( ; im <= iM; im ++ ) {\n\n\t\t\t\tif ( p.value - inOffset.value > ni ) return false;\n\n\t\t\t\tgetBits( 6, c, lc, uInt8Array, p );\n\n\t\t\t\tconst l = getBitsReturn.l;\n\t\t\t\tc = getBitsReturn.c;\n\t\t\t\tlc = getBitsReturn.lc;\n\n\t\t\t\thcode[ im ] = l;\n\n\t\t\t\tif ( l == LONG_ZEROCODE_RUN ) {\n\n\t\t\t\t\tif ( p.value - inOffset.value > ni ) {\n\n\t\t\t\t\t\tthrow new Error( 'Something wrong with hufUnpackEncTable' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgetBits( 8, c, lc, uInt8Array, p );\n\n\t\t\t\t\tlet zerun = getBitsReturn.l + SHORTEST_LONG_RUN;\n\t\t\t\t\tc = getBitsReturn.c;\n\t\t\t\t\tlc = getBitsReturn.lc;\n\n\t\t\t\t\tif ( im + zerun > iM + 1 ) {\n\n\t\t\t\t\t\tthrow new Error( 'Something wrong with hufUnpackEncTable' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\twhile ( zerun -- ) hcode[ im ++ ] = 0;\n\n\t\t\t\t\tim --;\n\n\t\t\t\t} else if ( l >= SHORT_ZEROCODE_RUN ) {\n\n\t\t\t\t\tlet zerun = l - SHORT_ZEROCODE_RUN + 2;\n\n\t\t\t\t\tif ( im + zerun > iM + 1 ) {\n\n\t\t\t\t\t\tthrow new Error( 'Something wrong with hufUnpackEncTable' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\twhile ( zerun -- ) hcode[ im ++ ] = 0;\n\n\t\t\t\t\tim --;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\thufCanonicalCodeTable( hcode );\n\n\t\t}\n\n\t\tfunction hufLength( code ) {\n\n\t\t\treturn code & 63;\n\n\t\t}\n\n\t\tfunction hufCode( code ) {\n\n\t\t\treturn code >> 6;\n\n\t\t}\n\n\t\tfunction hufBuildDecTable( hcode, im, iM, hdecod ) {\n\n\t\t\tfor ( ; im <= iM; im ++ ) {\n\n\t\t\t\tconst c = hufCode( hcode[ im ] );\n\t\t\t\tconst l = hufLength( hcode[ im ] );\n\n\t\t\t\tif ( c >> l ) {\n\n\t\t\t\t\tthrow new Error( 'Invalid table entry' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( l > HUF_DECBITS ) {\n\n\t\t\t\t\tconst pl = hdecod[ ( c >> ( l - HUF_DECBITS ) ) ];\n\n\t\t\t\t\tif ( pl.len ) {\n\n\t\t\t\t\t\tthrow new Error( 'Invalid table entry' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tpl.lit ++;\n\n\t\t\t\t\tif ( pl.p ) {\n\n\t\t\t\t\t\tconst p = pl.p;\n\t\t\t\t\t\tpl.p = new Array( pl.lit );\n\n\t\t\t\t\t\tfor ( let i = 0; i < pl.lit - 1; ++ i ) {\n\n\t\t\t\t\t\t\tpl.p[ i ] = p[ i ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpl.p = new Array( 1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tpl.p[ pl.lit - 1 ] = im;\n\n\t\t\t\t} else if ( l ) {\n\n\t\t\t\t\tlet plOffset = 0;\n\n\t\t\t\t\tfor ( let i = 1 << ( HUF_DECBITS - l ); i > 0; i -- ) {\n\n\t\t\t\t\t\tconst pl = hdecod[ ( c << ( HUF_DECBITS - l ) ) + plOffset ];\n\n\t\t\t\t\t\tif ( pl.len || pl.p ) {\n\n\t\t\t\t\t\t\tthrow new Error( 'Invalid table entry' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpl.len = l;\n\t\t\t\t\t\tpl.lit = im;\n\n\t\t\t\t\t\tplOffset ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tconst getCharReturn = { c: 0, lc: 0 };\n\n\t\tfunction getChar( c, lc, uInt8Array, inOffset ) {\n\n\t\t\tc = ( c << 8 ) | parseUint8Array( uInt8Array, inOffset );\n\t\t\tlc += 8;\n\n\t\t\tgetCharReturn.c = c;\n\t\t\tgetCharReturn.lc = lc;\n\n\t\t}\n\n\t\tconst getCodeReturn = { c: 0, lc: 0 };\n\n\t\tfunction getCode( po, rlc, c, lc, uInt8Array, inOffset, outBuffer, outBufferOffset, outBufferEndOffset ) {\n\n\t\t\tif ( po == rlc ) {\n\n\t\t\t\tif ( lc < 8 ) {\n\n\t\t\t\t\tgetChar( c, lc, uInt8Array, inOffset );\n\t\t\t\t\tc = getCharReturn.c;\n\t\t\t\t\tlc = getCharReturn.lc;\n\n\t\t\t\t}\n\n\t\t\t\tlc -= 8;\n\n\t\t\t\tlet cs = ( c >> lc );\n\t\t\t\tcs = new Uint8Array( [ cs ] )[ 0 ];\n\n\t\t\t\tif ( outBufferOffset.value + cs > outBufferEndOffset ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t\tconst s = outBuffer[ outBufferOffset.value - 1 ];\n\n\t\t\t\twhile ( cs -- > 0 ) {\n\n\t\t\t\t\toutBuffer[ outBufferOffset.value ++ ] = s;\n\n\t\t\t\t}\n\n\t\t\t} else if ( outBufferOffset.value < outBufferEndOffset ) {\n\n\t\t\t\toutBuffer[ outBufferOffset.value ++ ] = po;\n\n\t\t\t} else {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\tgetCodeReturn.c = c;\n\t\t\tgetCodeReturn.lc = lc;\n\n\t\t}\n\n\t\tfunction UInt16( value ) {\n\n\t\t\treturn ( value & 0xFFFF );\n\n\t\t}\n\n\t\tfunction Int16( value ) {\n\n\t\t\tconst ref = UInt16( value );\n\t\t\treturn ( ref > 0x7FFF ) ? ref - 0x10000 : ref;\n\n\t\t}\n\n\t\tconst wdec14Return = { a: 0, b: 0 };\n\n\t\tfunction wdec14( l, h ) {\n\n\t\t\tconst ls = Int16( l );\n\t\t\tconst hs = Int16( h );\n\n\t\t\tconst hi = hs;\n\t\t\tconst ai = ls + ( hi & 1 ) + ( hi >> 1 );\n\n\t\t\tconst as = ai;\n\t\t\tconst bs = ai - hi;\n\n\t\t\twdec14Return.a = as;\n\t\t\twdec14Return.b = bs;\n\n\t\t}\n\n\t\tfunction wdec16( l, h ) {\n\n\t\t\tconst m = UInt16( l );\n\t\t\tconst d = UInt16( h );\n\n\t\t\tconst bb = ( m - ( d >> 1 ) ) & MOD_MASK;\n\t\t\tconst aa = ( d + bb - A_OFFSET ) & MOD_MASK;\n\n\t\t\twdec14Return.a = aa;\n\t\t\twdec14Return.b = bb;\n\n\t\t}\n\n\t\tfunction wav2Decode( buffer, j, nx, ox, ny, oy, mx ) {\n\n\t\t\tconst w14 = mx < ( 1 << 14 );\n\t\t\tconst n = ( nx > ny ) ? ny : nx;\n\t\t\tlet p = 1;\n\t\t\tlet p2;\n\t\t\tlet py;\n\n\t\t\twhile ( p <= n ) p <<= 1;\n\n\t\t\tp >>= 1;\n\t\t\tp2 = p;\n\t\t\tp >>= 1;\n\n\t\t\twhile ( p >= 1 ) {\n\n\t\t\t\tpy = 0;\n\t\t\t\tconst ey = py + oy * ( ny - p2 );\n\t\t\t\tconst oy1 = oy * p;\n\t\t\t\tconst oy2 = oy * p2;\n\t\t\t\tconst ox1 = ox * p;\n\t\t\t\tconst ox2 = ox * p2;\n\t\t\t\tlet i00, i01, i10, i11;\n\n\t\t\t\tfor ( ; py <= ey; py += oy2 ) {\n\n\t\t\t\t\tlet px = py;\n\t\t\t\t\tconst ex = py + ox * ( nx - p2 );\n\n\t\t\t\t\tfor ( ; px <= ex; px += ox2 ) {\n\n\t\t\t\t\t\tconst p01 = px + ox1;\n\t\t\t\t\t\tconst p10 = px + oy1;\n\t\t\t\t\t\tconst p11 = p10 + ox1;\n\n\t\t\t\t\t\tif ( w14 ) {\n\n\t\t\t\t\t\t\twdec14( buffer[ px + j ], buffer[ p10 + j ] );\n\n\t\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\t\ti10 = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec14( buffer[ p01 + j ], buffer[ p11 + j ] );\n\n\t\t\t\t\t\t\ti01 = wdec14Return.a;\n\t\t\t\t\t\t\ti11 = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec14( i00, i01 );\n\n\t\t\t\t\t\t\tbuffer[ px + j ] = wdec14Return.a;\n\t\t\t\t\t\t\tbuffer[ p01 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec14( i10, i11 );\n\n\t\t\t\t\t\t\tbuffer[ p10 + j ] = wdec14Return.a;\n\t\t\t\t\t\t\tbuffer[ p11 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\twdec16( buffer[ px + j ], buffer[ p10 + j ] );\n\n\t\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\t\ti10 = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec16( buffer[ p01 + j ], buffer[ p11 + j ] );\n\n\t\t\t\t\t\t\ti01 = wdec14Return.a;\n\t\t\t\t\t\t\ti11 = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec16( i00, i01 );\n\n\t\t\t\t\t\t\tbuffer[ px + j ] = wdec14Return.a;\n\t\t\t\t\t\t\tbuffer[ p01 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec16( i10, i11 );\n\n\t\t\t\t\t\t\tbuffer[ p10 + j ] = wdec14Return.a;\n\t\t\t\t\t\t\tbuffer[ p11 + j ] = wdec14Return.b;\n\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( nx & p ) {\n\n\t\t\t\t\t\tconst p10 = px + oy1;\n\n\t\t\t\t\t\tif ( w14 )\n\t\t\t\t\t\t\twdec14( buffer[ px + j ], buffer[ p10 + j ] );\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\twdec16( buffer[ px + j ], buffer[ p10 + j ] );\n\n\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\tbuffer[ p10 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\tbuffer[ px + j ] = i00;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ny & p ) {\n\n\t\t\t\t\tlet px = py;\n\t\t\t\t\tconst ex = py + ox * ( nx - p2 );\n\n\t\t\t\t\tfor ( ; px <= ex; px += ox2 ) {\n\n\t\t\t\t\t\tconst p01 = px + ox1;\n\n\t\t\t\t\t\tif ( w14 )\n\t\t\t\t\t\t\twdec14( buffer[ px + j ], buffer[ p01 + j ] );\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\twdec16( buffer[ px + j ], buffer[ p01 + j ] );\n\n\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\tbuffer[ p01 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\tbuffer[ px + j ] = i00;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tp2 = p;\n\t\t\t\tp >>= 1;\n\n\t\t\t}\n\n\t\t\treturn py;\n\n\t\t}\n\n\t\tfunction hufDecode( encodingTable, decodingTable, uInt8Array, inOffset, ni, rlc, no, outBuffer, outOffset ) {\n\n\t\t\tlet c = 0;\n\t\t\tlet lc = 0;\n\t\t\tconst outBufferEndOffset = no;\n\t\t\tconst inOffsetEnd = Math.trunc( inOffset.value + ( ni + 7 ) / 8 );\n\n\t\t\twhile ( inOffset.value < inOffsetEnd ) {\n\n\t\t\t\tgetChar( c, lc, uInt8Array, inOffset );\n\n\t\t\t\tc = getCharReturn.c;\n\t\t\t\tlc = getCharReturn.lc;\n\n\t\t\t\twhile ( lc >= HUF_DECBITS ) {\n\n\t\t\t\t\tconst index = ( c >> ( lc - HUF_DECBITS ) ) & HUF_DECMASK;\n\t\t\t\t\tconst pl = decodingTable[ index ];\n\n\t\t\t\t\tif ( pl.len ) {\n\n\t\t\t\t\t\tlc -= pl.len;\n\n\t\t\t\t\t\tgetCode( pl.lit, rlc, c, lc, uInt8Array, inOffset, outBuffer, outOffset, outBufferEndOffset );\n\n\t\t\t\t\t\tc = getCodeReturn.c;\n\t\t\t\t\t\tlc = getCodeReturn.lc;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ! pl.p ) {\n\n\t\t\t\t\t\t\tthrow new Error( 'hufDecode issues' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet j;\n\n\t\t\t\t\t\tfor ( j = 0; j < pl.lit; j ++ ) {\n\n\t\t\t\t\t\t\tconst l = hufLength( encodingTable[ pl.p[ j ] ] );\n\n\t\t\t\t\t\t\twhile ( lc < l && inOffset.value < inOffsetEnd ) {\n\n\t\t\t\t\t\t\t\tgetChar( c, lc, uInt8Array, inOffset );\n\n\t\t\t\t\t\t\t\tc = getCharReturn.c;\n\t\t\t\t\t\t\t\tlc = getCharReturn.lc;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( lc >= l ) {\n\n\t\t\t\t\t\t\t\tif ( hufCode( encodingTable[ pl.p[ j ] ] ) == ( ( c >> ( lc - l ) ) & ( ( 1 << l ) - 1 ) ) ) {\n\n\t\t\t\t\t\t\t\t\tlc -= l;\n\n\t\t\t\t\t\t\t\t\tgetCode( pl.p[ j ], rlc, c, lc, uInt8Array, inOffset, outBuffer, outOffset, outBufferEndOffset );\n\n\t\t\t\t\t\t\t\t\tc = getCodeReturn.c;\n\t\t\t\t\t\t\t\t\tlc = getCodeReturn.lc;\n\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( j == pl.lit ) {\n\n\t\t\t\t\t\t\tthrow new Error( 'hufDecode issues' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst i = ( 8 - ni ) & 7;\n\n\t\t\tc >>= i;\n\t\t\tlc -= i;\n\n\t\t\twhile ( lc > 0 ) {\n\n\t\t\t\tconst pl = decodingTable[ ( c << ( HUF_DECBITS - lc ) ) & HUF_DECMASK ];\n\n\t\t\t\tif ( pl.len ) {\n\n\t\t\t\t\tlc -= pl.len;\n\n\t\t\t\t\tgetCode( pl.lit, rlc, c, lc, uInt8Array, inOffset, outBuffer, outOffset, outBufferEndOffset );\n\n\t\t\t\t\tc = getCodeReturn.c;\n\t\t\t\t\tlc = getCodeReturn.lc;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'hufDecode issues' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tfunction hufUncompress( uInt8Array, inDataView, inOffset, nCompressed, outBuffer, nRaw ) {\n\n\t\t\tconst outOffset = { value: 0 };\n\t\t\tconst initialInOffset = inOffset.value;\n\n\t\t\tconst im = parseUint32( inDataView, inOffset );\n\t\t\tconst iM = parseUint32( inDataView, inOffset );\n\n\t\t\tinOffset.value += 4;\n\n\t\t\tconst nBits = parseUint32( inDataView, inOffset );\n\n\t\t\tinOffset.value += 4;\n\n\t\t\tif ( im < 0 || im >= HUF_ENCSIZE || iM < 0 || iM >= HUF_ENCSIZE ) {\n\n\t\t\t\tthrow new Error( 'Something wrong with HUF_ENCSIZE' );\n\n\t\t\t}\n\n\t\t\tconst freq = new Array( HUF_ENCSIZE );\n\t\t\tconst hdec = new Array( HUF_DECSIZE );\n\n\t\t\thufClearDecTable( hdec );\n\n\t\t\tconst ni = nCompressed - ( inOffset.value - initialInOffset );\n\n\t\t\thufUnpackEncTable( uInt8Array, inOffset, ni, im, iM, freq );\n\n\t\t\tif ( nBits > 8 * ( nCompressed - ( inOffset.value - initialInOffset ) ) ) {\n\n\t\t\t\tthrow new Error( 'Something wrong with hufUncompress' );\n\n\t\t\t}\n\n\t\t\thufBuildDecTable( freq, im, iM, hdec );\n\n\t\t\thufDecode( freq, hdec, uInt8Array, inOffset, nBits, iM, nRaw, outBuffer, outOffset );\n\n\t\t}\n\n\t\tfunction applyLut( lut, data, nData ) {\n\n\t\t\tfor ( let i = 0; i < nData; ++ i ) {\n\n\t\t\t\tdata[ i ] = lut[ data[ i ] ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction predictor( source ) {\n\n\t\t\tfor ( let t = 1; t < source.length; t ++ ) {\n\n\t\t\t\tconst d = source[ t - 1 ] + source[ t ] - 128;\n\t\t\t\tsource[ t ] = d;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction interleaveScalar( source, out ) {\n\n\t\t\tlet t1 = 0;\n\t\t\tlet t2 = Math.floor( ( source.length + 1 ) / 2 );\n\t\t\tlet s = 0;\n\t\t\tconst stop = source.length - 1;\n\n\t\t\twhile ( true ) {\n\n\t\t\t\tif ( s > stop ) break;\n\t\t\t\tout[ s ++ ] = source[ t1 ++ ];\n\n\t\t\t\tif ( s > stop ) break;\n\t\t\t\tout[ s ++ ] = source[ t2 ++ ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction decodeRunLength( source ) {\n\n\t\t\tlet size = source.byteLength;\n\t\t\tconst out = new Array();\n\t\t\tlet p = 0;\n\n\t\t\tconst reader = new DataView( source );\n\n\t\t\twhile ( size > 0 ) {\n\n\t\t\t\tconst l = reader.getInt8( p ++ );\n\n\t\t\t\tif ( l < 0 ) {\n\n\t\t\t\t\tconst count = - l;\n\t\t\t\t\tsize -= count + 1;\n\n\t\t\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\tout.push( reader.getUint8( p ++ ) );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst count = l;\n\t\t\t\t\tsize -= 2;\n\n\t\t\t\t\tconst value = reader.getUint8( p ++ );\n\n\t\t\t\t\tfor ( let i = 0; i < count + 1; i ++ ) {\n\n\t\t\t\t\t\tout.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn out;\n\n\t\t}\n\n\t\tfunction lossyDctDecode( cscSet, rowPtrs, channelData, acBuffer, dcBuffer, outBuffer ) {\n\n\t\t\tlet dataView = new DataView( outBuffer.buffer );\n\n\t\t\tconst width = channelData[ cscSet.idx[ 0 ] ].width;\n\t\t\tconst height = channelData[ cscSet.idx[ 0 ] ].height;\n\n\t\t\tconst numComp = 3;\n\n\t\t\tconst numFullBlocksX = Math.floor( width / 8.0 );\n\t\t\tconst numBlocksX = Math.ceil( width / 8.0 );\n\t\t\tconst numBlocksY = Math.ceil( height / 8.0 );\n\t\t\tconst leftoverX = width - ( numBlocksX - 1 ) * 8;\n\t\t\tconst leftoverY = height - ( numBlocksY - 1 ) * 8;\n\n\t\t\tconst currAcComp = { value: 0 };\n\t\t\tconst currDcComp = new Array( numComp );\n\t\t\tconst dctData = new Array( numComp );\n\t\t\tconst halfZigBlock = new Array( numComp );\n\t\t\tconst rowBlock = new Array( numComp );\n\t\t\tconst rowOffsets = new Array( numComp );\n\n\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\trowOffsets[ comp ] = rowPtrs[ cscSet.idx[ comp ] ];\n\t\t\t\tcurrDcComp[ comp ] = ( comp < 1 ) ? 0 : currDcComp[ comp - 1 ] + numBlocksX * numBlocksY;\n\t\t\t\tdctData[ comp ] = new Float32Array( 64 );\n\t\t\t\thalfZigBlock[ comp ] = new Uint16Array( 64 );\n\t\t\t\trowBlock[ comp ] = new Uint16Array( numBlocksX * 64 );\n\n\t\t\t}\n\n\t\t\tfor ( let blocky = 0; blocky < numBlocksY; ++ blocky ) {\n\n\t\t\t\tlet maxY = 8;\n\n\t\t\t\tif ( blocky == numBlocksY - 1 )\n\t\t\t\t\tmaxY = leftoverY;\n\n\t\t\t\tlet maxX = 8;\n\n\t\t\t\tfor ( let blockx = 0; blockx < numBlocksX; ++ blockx ) {\n\n\t\t\t\t\tif ( blockx == numBlocksX - 1 )\n\t\t\t\t\t\tmaxX = leftoverX;\n\n\t\t\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\t\t\thalfZigBlock[ comp ].fill( 0 );\n\n\t\t\t\t\t\t// set block DC component\n\t\t\t\t\t\thalfZigBlock[ comp ][ 0 ] = dcBuffer[ currDcComp[ comp ] ++ ];\n\t\t\t\t\t\t// set block AC components\n\t\t\t\t\t\tunRleAC( currAcComp, acBuffer, halfZigBlock[ comp ] );\n\n\t\t\t\t\t\t// UnZigZag block to float\n\t\t\t\t\t\tunZigZag( halfZigBlock[ comp ], dctData[ comp ] );\n\t\t\t\t\t\t// decode float dct\n\t\t\t\t\t\tdctInverse( dctData[ comp ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( numComp == 3 ) {\n\n\t\t\t\t\t\tcsc709Inverse( dctData );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\t\t\tconvertToHalf( dctData[ comp ], rowBlock[ comp ], blockx * 64 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // blockx\n\n\t\t\t\tlet offset = 0;\n\n\t\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\t\tconst type = channelData[ cscSet.idx[ comp ] ].type;\n\n\t\t\t\t\tfor ( let y = 8 * blocky; y < 8 * blocky + maxY; ++ y ) {\n\n\t\t\t\t\t\toffset = rowOffsets[ comp ][ y ];\n\n\t\t\t\t\t\tfor ( let blockx = 0; blockx < numFullBlocksX; ++ blockx ) {\n\n\t\t\t\t\t\t\tconst src = blockx * 64 + ( ( y & 0x7 ) * 8 );\n\n\t\t\t\t\t\t\tdataView.setUint16( offset + 0 * INT16_SIZE * type, rowBlock[ comp ][ src + 0 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 1 * INT16_SIZE * type, rowBlock[ comp ][ src + 1 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 2 * INT16_SIZE * type, rowBlock[ comp ][ src + 2 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 3 * INT16_SIZE * type, rowBlock[ comp ][ src + 3 ], true );\n\n\t\t\t\t\t\t\tdataView.setUint16( offset + 4 * INT16_SIZE * type, rowBlock[ comp ][ src + 4 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 5 * INT16_SIZE * type, rowBlock[ comp ][ src + 5 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 6 * INT16_SIZE * type, rowBlock[ comp ][ src + 6 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 7 * INT16_SIZE * type, rowBlock[ comp ][ src + 7 ], true );\n\n\t\t\t\t\t\t\toffset += 8 * INT16_SIZE * type;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// handle partial X blocks\n\t\t\t\t\tif ( numFullBlocksX != numBlocksX ) {\n\n\t\t\t\t\t\tfor ( let y = 8 * blocky; y < 8 * blocky + maxY; ++ y ) {\n\n\t\t\t\t\t\t\tconst offset = rowOffsets[ comp ][ y ] + 8 * numFullBlocksX * INT16_SIZE * type;\n\t\t\t\t\t\t\tconst src = numFullBlocksX * 64 + ( ( y & 0x7 ) * 8 );\n\n\t\t\t\t\t\t\tfor ( let x = 0; x < maxX; ++ x ) {\n\n\t\t\t\t\t\t\t\tdataView.setUint16( offset + x * INT16_SIZE * type, rowBlock[ comp ][ src + x ], true );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} // comp\n\n\t\t\t} // blocky\n\n\t\t\tconst halfRow = new Uint16Array( width );\n\t\t\tdataView = new DataView( outBuffer.buffer );\n\n\t\t\t// convert channels back to float, if needed\n\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\tchannelData[ cscSet.idx[ comp ] ].decoded = true;\n\t\t\t\tconst type = channelData[ cscSet.idx[ comp ] ].type;\n\n\t\t\t\tif ( channelData[ comp ].type != 2 ) continue;\n\n\t\t\t\tfor ( let y = 0; y < height; ++ y ) {\n\n\t\t\t\t\tconst offset = rowOffsets[ comp ][ y ];\n\n\t\t\t\t\tfor ( let x = 0; x < width; ++ x ) {\n\n\t\t\t\t\t\thalfRow[ x ] = dataView.getUint16( offset + x * INT16_SIZE * type, true );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let x = 0; x < width; ++ x ) {\n\n\t\t\t\t\t\tdataView.setFloat32( offset + x * INT16_SIZE * type, decodeFloat16( halfRow[ x ] ), true );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction unRleAC( currAcComp, acBuffer, halfZigBlock ) {\n\n\t\t\tlet acValue;\n\t\t\tlet dctComp = 1;\n\n\t\t\twhile ( dctComp < 64 ) {\n\n\t\t\t\tacValue = acBuffer[ currAcComp.value ];\n\n\t\t\t\tif ( acValue == 0xff00 ) {\n\n\t\t\t\t\tdctComp = 64;\n\n\t\t\t\t} else if ( acValue >> 8 == 0xff ) {\n\n\t\t\t\t\tdctComp += acValue & 0xff;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thalfZigBlock[ dctComp ] = acValue;\n\t\t\t\t\tdctComp ++;\n\n\t\t\t\t}\n\n\t\t\t\tcurrAcComp.value ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction unZigZag( src, dst ) {\n\n\t\t\tdst[ 0 ] = decodeFloat16( src[ 0 ] );\n\t\t\tdst[ 1 ] = decodeFloat16( src[ 1 ] );\n\t\t\tdst[ 2 ] = decodeFloat16( src[ 5 ] );\n\t\t\tdst[ 3 ] = decodeFloat16( src[ 6 ] );\n\t\t\tdst[ 4 ] = decodeFloat16( src[ 14 ] );\n\t\t\tdst[ 5 ] = decodeFloat16( src[ 15 ] );\n\t\t\tdst[ 6 ] = decodeFloat16( src[ 27 ] );\n\t\t\tdst[ 7 ] = decodeFloat16( src[ 28 ] );\n\t\t\tdst[ 8 ] = decodeFloat16( src[ 2 ] );\n\t\t\tdst[ 9 ] = decodeFloat16( src[ 4 ] );\n\n\t\t\tdst[ 10 ] = decodeFloat16( src[ 7 ] );\n\t\t\tdst[ 11 ] = decodeFloat16( src[ 13 ] );\n\t\t\tdst[ 12 ] = decodeFloat16( src[ 16 ] );\n\t\t\tdst[ 13 ] = decodeFloat16( src[ 26 ] );\n\t\t\tdst[ 14 ] = decodeFloat16( src[ 29 ] );\n\t\t\tdst[ 15 ] = decodeFloat16( src[ 42 ] );\n\t\t\tdst[ 16 ] = decodeFloat16( src[ 3 ] );\n\t\t\tdst[ 17 ] = decodeFloat16( src[ 8 ] );\n\t\t\tdst[ 18 ] = decodeFloat16( src[ 12 ] );\n\t\t\tdst[ 19 ] = decodeFloat16( src[ 17 ] );\n\n\t\t\tdst[ 20 ] = decodeFloat16( src[ 25 ] );\n\t\t\tdst[ 21 ] = decodeFloat16( src[ 30 ] );\n\t\t\tdst[ 22 ] = decodeFloat16( src[ 41 ] );\n\t\t\tdst[ 23 ] = decodeFloat16( src[ 43 ] );\n\t\t\tdst[ 24 ] = decodeFloat16( src[ 9 ] );\n\t\t\tdst[ 25 ] = decodeFloat16( src[ 11 ] );\n\t\t\tdst[ 26 ] = decodeFloat16( src[ 18 ] );\n\t\t\tdst[ 27 ] = decodeFloat16( src[ 24 ] );\n\t\t\tdst[ 28 ] = decodeFloat16( src[ 31 ] );\n\t\t\tdst[ 29 ] = decodeFloat16( src[ 40 ] );\n\n\t\t\tdst[ 30 ] = decodeFloat16( src[ 44 ] );\n\t\t\tdst[ 31 ] = decodeFloat16( src[ 53 ] );\n\t\t\tdst[ 32 ] = decodeFloat16( src[ 10 ] );\n\t\t\tdst[ 33 ] = decodeFloat16( src[ 19 ] );\n\t\t\tdst[ 34 ] = decodeFloat16( src[ 23 ] );\n\t\t\tdst[ 35 ] = decodeFloat16( src[ 32 ] );\n\t\t\tdst[ 36 ] = decodeFloat16( src[ 39 ] );\n\t\t\tdst[ 37 ] = decodeFloat16( src[ 45 ] );\n\t\t\tdst[ 38 ] = decodeFloat16( src[ 52 ] );\n\t\t\tdst[ 39 ] = decodeFloat16( src[ 54 ] );\n\n\t\t\tdst[ 40 ] = decodeFloat16( src[ 20 ] );\n\t\t\tdst[ 41 ] = decodeFloat16( src[ 22 ] );\n\t\t\tdst[ 42 ] = decodeFloat16( src[ 33 ] );\n\t\t\tdst[ 43 ] = decodeFloat16( src[ 38 ] );\n\t\t\tdst[ 44 ] = decodeFloat16( src[ 46 ] );\n\t\t\tdst[ 45 ] = decodeFloat16( src[ 51 ] );\n\t\t\tdst[ 46 ] = decodeFloat16( src[ 55 ] );\n\t\t\tdst[ 47 ] = decodeFloat16( src[ 60 ] );\n\t\t\tdst[ 48 ] = decodeFloat16( src[ 21 ] );\n\t\t\tdst[ 49 ] = decodeFloat16( src[ 34 ] );\n\n\t\t\tdst[ 50 ] = decodeFloat16( src[ 37 ] );\n\t\t\tdst[ 51 ] = decodeFloat16( src[ 47 ] );\n\t\t\tdst[ 52 ] = decodeFloat16( src[ 50 ] );\n\t\t\tdst[ 53 ] = decodeFloat16( src[ 56 ] );\n\t\t\tdst[ 54 ] = decodeFloat16( src[ 59 ] );\n\t\t\tdst[ 55 ] = decodeFloat16( src[ 61 ] );\n\t\t\tdst[ 56 ] = decodeFloat16( src[ 35 ] );\n\t\t\tdst[ 57 ] = decodeFloat16( src[ 36 ] );\n\t\t\tdst[ 58 ] = decodeFloat16( src[ 48 ] );\n\t\t\tdst[ 59 ] = decodeFloat16( src[ 49 ] );\n\n\t\t\tdst[ 60 ] = decodeFloat16( src[ 57 ] );\n\t\t\tdst[ 61 ] = decodeFloat16( src[ 58 ] );\n\t\t\tdst[ 62 ] = decodeFloat16( src[ 62 ] );\n\t\t\tdst[ 63 ] = decodeFloat16( src[ 63 ] );\n\n\t\t}\n\n\t\tfunction dctInverse( data ) {\n\n\t\t\tconst a = 0.5 * Math.cos( 3.14159 / 4.0 );\n\t\t\tconst b = 0.5 * Math.cos( 3.14159 / 16.0 );\n\t\t\tconst c = 0.5 * Math.cos( 3.14159 / 8.0 );\n\t\t\tconst d = 0.5 * Math.cos( 3.0 * 3.14159 / 16.0 );\n\t\t\tconst e = 0.5 * Math.cos( 5.0 * 3.14159 / 16.0 );\n\t\t\tconst f = 0.5 * Math.cos( 3.0 * 3.14159 / 8.0 );\n\t\t\tconst g = 0.5 * Math.cos( 7.0 * 3.14159 / 16.0 );\n\n\t\t\tconst alpha = new Array( 4 );\n\t\t\tconst beta = new Array( 4 );\n\t\t\tconst theta = new Array( 4 );\n\t\t\tconst gamma = new Array( 4 );\n\n\t\t\tfor ( let row = 0; row < 8; ++ row ) {\n\n\t\t\t\tconst rowPtr = row * 8;\n\n\t\t\t\talpha[ 0 ] = c * data[ rowPtr + 2 ];\n\t\t\t\talpha[ 1 ] = f * data[ rowPtr + 2 ];\n\t\t\t\talpha[ 2 ] = c * data[ rowPtr + 6 ];\n\t\t\t\talpha[ 3 ] = f * data[ rowPtr + 6 ];\n\n\t\t\t\tbeta[ 0 ] = b * data[ rowPtr + 1 ] + d * data[ rowPtr + 3 ] + e * data[ rowPtr + 5 ] + g * data[ rowPtr + 7 ];\n\t\t\t\tbeta[ 1 ] = d * data[ rowPtr + 1 ] - g * data[ rowPtr + 3 ] - b * data[ rowPtr + 5 ] - e * data[ rowPtr + 7 ];\n\t\t\t\tbeta[ 2 ] = e * data[ rowPtr + 1 ] - b * data[ rowPtr + 3 ] + g * data[ rowPtr + 5 ] + d * data[ rowPtr + 7 ];\n\t\t\t\tbeta[ 3 ] = g * data[ rowPtr + 1 ] - e * data[ rowPtr + 3 ] + d * data[ rowPtr + 5 ] - b * data[ rowPtr + 7 ];\n\n\t\t\t\ttheta[ 0 ] = a * ( data[ rowPtr + 0 ] + data[ rowPtr + 4 ] );\n\t\t\t\ttheta[ 3 ] = a * ( data[ rowPtr + 0 ] - data[ rowPtr + 4 ] );\n\t\t\t\ttheta[ 1 ] = alpha[ 0 ] + alpha[ 3 ];\n\t\t\t\ttheta[ 2 ] = alpha[ 1 ] - alpha[ 2 ];\n\n\t\t\t\tgamma[ 0 ] = theta[ 0 ] + theta[ 1 ];\n\t\t\t\tgamma[ 1 ] = theta[ 3 ] + theta[ 2 ];\n\t\t\t\tgamma[ 2 ] = theta[ 3 ] - theta[ 2 ];\n\t\t\t\tgamma[ 3 ] = theta[ 0 ] - theta[ 1 ];\n\n\t\t\t\tdata[ rowPtr + 0 ] = gamma[ 0 ] + beta[ 0 ];\n\t\t\t\tdata[ rowPtr + 1 ] = gamma[ 1 ] + beta[ 1 ];\n\t\t\t\tdata[ rowPtr + 2 ] = gamma[ 2 ] + beta[ 2 ];\n\t\t\t\tdata[ rowPtr + 3 ] = gamma[ 3 ] + beta[ 3 ];\n\n\t\t\t\tdata[ rowPtr + 4 ] = gamma[ 3 ] - beta[ 3 ];\n\t\t\t\tdata[ rowPtr + 5 ] = gamma[ 2 ] - beta[ 2 ];\n\t\t\t\tdata[ rowPtr + 6 ] = gamma[ 1 ] - beta[ 1 ];\n\t\t\t\tdata[ rowPtr + 7 ] = gamma[ 0 ] - beta[ 0 ];\n\n\t\t\t}\n\n\t\t\tfor ( let column = 0; column < 8; ++ column ) {\n\n\t\t\t\talpha[ 0 ] = c * data[ 16 + column ];\n\t\t\t\talpha[ 1 ] = f * data[ 16 + column ];\n\t\t\t\talpha[ 2 ] = c * data[ 48 + column ];\n\t\t\t\talpha[ 3 ] = f * data[ 48 + column ];\n\n\t\t\t\tbeta[ 0 ] = b * data[ 8 + column ] + d * data[ 24 + column ] + e * data[ 40 + column ] + g * data[ 56 + column ];\n\t\t\t\tbeta[ 1 ] = d * data[ 8 + column ] - g * data[ 24 + column ] - b * data[ 40 + column ] - e * data[ 56 + column ];\n\t\t\t\tbeta[ 2 ] = e * data[ 8 + column ] - b * data[ 24 + column ] + g * data[ 40 + column ] + d * data[ 56 + column ];\n\t\t\t\tbeta[ 3 ] = g * data[ 8 + column ] - e * data[ 24 + column ] + d * data[ 40 + column ] - b * data[ 56 + column ];\n\n\t\t\t\ttheta[ 0 ] = a * ( data[ column ] + data[ 32 + column ] );\n\t\t\t\ttheta[ 3 ] = a * ( data[ column ] - data[ 32 + column ] );\n\n\t\t\t\ttheta[ 1 ] = alpha[ 0 ] + alpha[ 3 ];\n\t\t\t\ttheta[ 2 ] = alpha[ 1 ] - alpha[ 2 ];\n\n\t\t\t\tgamma[ 0 ] = theta[ 0 ] + theta[ 1 ];\n\t\t\t\tgamma[ 1 ] = theta[ 3 ] + theta[ 2 ];\n\t\t\t\tgamma[ 2 ] = theta[ 3 ] - theta[ 2 ];\n\t\t\t\tgamma[ 3 ] = theta[ 0 ] - theta[ 1 ];\n\n\t\t\t\tdata[ 0 + column ] = gamma[ 0 ] + beta[ 0 ];\n\t\t\t\tdata[ 8 + column ] = gamma[ 1 ] + beta[ 1 ];\n\t\t\t\tdata[ 16 + column ] = gamma[ 2 ] + beta[ 2 ];\n\t\t\t\tdata[ 24 + column ] = gamma[ 3 ] + beta[ 3 ];\n\n\t\t\t\tdata[ 32 + column ] = gamma[ 3 ] - beta[ 3 ];\n\t\t\t\tdata[ 40 + column ] = gamma[ 2 ] - beta[ 2 ];\n\t\t\t\tdata[ 48 + column ] = gamma[ 1 ] - beta[ 1 ];\n\t\t\t\tdata[ 56 + column ] = gamma[ 0 ] - beta[ 0 ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction csc709Inverse( data ) {\n\n\t\t\tfor ( let i = 0; i < 64; ++ i ) {\n\n\t\t\t\tconst y = data[ 0 ][ i ];\n\t\t\t\tconst cb = data[ 1 ][ i ];\n\t\t\t\tconst cr = data[ 2 ][ i ];\n\n\t\t\t\tdata[ 0 ][ i ] = y + 1.5747 * cr;\n\t\t\t\tdata[ 1 ][ i ] = y - 0.1873 * cb - 0.4682 * cr;\n\t\t\t\tdata[ 2 ][ i ] = y + 1.8556 * cb;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction convertToHalf( src, dst, idx ) {\n\n\t\t\tfor ( let i = 0; i < 64; ++ i ) {\n\n\t\t\t\tdst[ idx + i ] = DataUtils.toHalfFloat( toLinear( src[ i ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction toLinear( float ) {\n\n\t\t\tif ( float <= 1 ) {\n\n\t\t\t\treturn Math.sign( float ) * Math.pow( Math.abs( float ), 2.2 );\n\n\t\t\t} else {\n\n\t\t\t\treturn Math.sign( float ) * Math.pow( logBase, Math.abs( float ) - 1.0 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uncompressRAW( info ) {\n\n\t\t\treturn new DataView( info.array.buffer, info.offset.value, info.size );\n\n\t\t}\n\n\t\tfunction uncompressRLE( info ) {\n\n\t\t\tconst compressed = info.viewer.buffer.slice( info.offset.value, info.offset.value + info.size );\n\n\t\t\tconst rawBuffer = new Uint8Array( decodeRunLength( compressed ) );\n\t\t\tconst tmpBuffer = new Uint8Array( rawBuffer.length );\n\n\t\t\tpredictor( rawBuffer ); // revert predictor\n\n\t\t\tinterleaveScalar( rawBuffer, tmpBuffer ); // interleave pixels\n\n\t\t\treturn new DataView( tmpBuffer.buffer );\n\n\t\t}\n\n\t\tfunction uncompressZIP( info ) {\n\n\t\t\tconst compressed = info.array.slice( info.offset.value, info.offset.value + info.size );\n\n\t\t\tif ( typeof fflate === 'undefined' ) {\n\n\t\t\t\tconsole.error( 'THREE.EXRLoader: External library fflate.min.js required.' );\n\n\t\t\t}\n\n\t\t\tconst rawBuffer = fflate.unzlibSync( compressed ); // eslint-disable-line no-undef\n\t\t\tconst tmpBuffer = new Uint8Array( rawBuffer.length );\n\n\t\t\tpredictor( rawBuffer ); // revert predictor\n\n\t\t\tinterleaveScalar( rawBuffer, tmpBuffer ); // interleave pixels\n\n\t\t\treturn new DataView( tmpBuffer.buffer );\n\n\t\t}\n\n\t\tfunction uncompressPIZ( info ) {\n\n\t\t\tconst inDataView = info.viewer;\n\t\t\tconst inOffset = { value: info.offset.value };\n\n\t\t\tconst outBuffer = new Uint16Array( info.width * info.scanlineBlockSize * ( info.channels * info.type ) );\n\t\t\tconst bitmap = new Uint8Array( BITMAP_SIZE );\n\n\t\t\t// Setup channel info\n\t\t\tlet outBufferEnd = 0;\n\t\t\tconst pizChannelData = new Array( info.channels );\n\t\t\tfor ( let i = 0; i < info.channels; i ++ ) {\n\n\t\t\t\tpizChannelData[ i ] = {};\n\t\t\t\tpizChannelData[ i ][ 'start' ] = outBufferEnd;\n\t\t\t\tpizChannelData[ i ][ 'end' ] = pizChannelData[ i ][ 'start' ];\n\t\t\t\tpizChannelData[ i ][ 'nx' ] = info.width;\n\t\t\t\tpizChannelData[ i ][ 'ny' ] = info.lines;\n\t\t\t\tpizChannelData[ i ][ 'size' ] = info.type;\n\n\t\t\t\toutBufferEnd += pizChannelData[ i ].nx * pizChannelData[ i ].ny * pizChannelData[ i ].size;\n\n\t\t\t}\n\n\t\t\t// Read range compression data\n\n\t\t\tconst minNonZero = parseUint16( inDataView, inOffset );\n\t\t\tconst maxNonZero = parseUint16( inDataView, inOffset );\n\n\t\t\tif ( maxNonZero >= BITMAP_SIZE ) {\n\n\t\t\t\tthrow new Error( 'Something is wrong with PIZ_COMPRESSION BITMAP_SIZE' );\n\n\t\t\t}\n\n\t\t\tif ( minNonZero <= maxNonZero ) {\n\n\t\t\t\tfor ( let i = 0; i < maxNonZero - minNonZero + 1; i ++ ) {\n\n\t\t\t\t\tbitmap[ i + minNonZero ] = parseUint8( inDataView, inOffset );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Reverse LUT\n\t\t\tconst lut = new Uint16Array( USHORT_RANGE );\n\t\t\tconst maxValue = reverseLutFromBitmap( bitmap, lut );\n\n\t\t\tconst length = parseUint32( inDataView, inOffset );\n\n\t\t\t// Huffman decoding\n\t\t\thufUncompress( info.array, inDataView, inOffset, length, outBuffer, outBufferEnd );\n\n\t\t\t// Wavelet decoding\n\t\t\tfor ( let i = 0; i < info.channels; ++ i ) {\n\n\t\t\t\tconst cd = pizChannelData[ i ];\n\n\t\t\t\tfor ( let j = 0; j < pizChannelData[ i ].size; ++ j ) {\n\n\t\t\t\t\twav2Decode(\n\t\t\t\t\t\toutBuffer,\n\t\t\t\t\t\tcd.start + j,\n\t\t\t\t\t\tcd.nx,\n\t\t\t\t\t\tcd.size,\n\t\t\t\t\t\tcd.ny,\n\t\t\t\t\t\tcd.nx * cd.size,\n\t\t\t\t\t\tmaxValue\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Expand the pixel data to their original range\n\t\t\tapplyLut( lut, outBuffer, outBufferEnd );\n\n\t\t\t// Rearrange the pixel data into the format expected by the caller.\n\t\t\tlet tmpOffset = 0;\n\t\t\tconst tmpBuffer = new Uint8Array( outBuffer.buffer.byteLength );\n\t\t\tfor ( let y = 0; y < info.lines; y ++ ) {\n\n\t\t\t\tfor ( let c = 0; c < info.channels; c ++ ) {\n\n\t\t\t\t\tconst cd = pizChannelData[ c ];\n\n\t\t\t\t\tconst n = cd.nx * cd.size;\n\t\t\t\t\tconst cp = new Uint8Array( outBuffer.buffer, cd.end * INT16_SIZE, n * INT16_SIZE );\n\n\t\t\t\t\ttmpBuffer.set( cp, tmpOffset );\n\t\t\t\t\ttmpOffset += n * INT16_SIZE;\n\t\t\t\t\tcd.end += n;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new DataView( tmpBuffer.buffer );\n\n\t\t}\n\n\t\tfunction uncompressPXR( info ) {\n\n\t\t\tconst compressed = info.array.slice( info.offset.value, info.offset.value + info.size );\n\n\t\t\tif ( typeof fflate === 'undefined' ) {\n\n\t\t\t\tconsole.error( 'THREE.EXRLoader: External library fflate.min.js required.' );\n\n\t\t\t}\n\n\t\t\tconst rawBuffer = fflate.unzlibSync( compressed ); // eslint-disable-line no-undef\n\n\t\t\tconst sz = info.lines * info.channels * info.width;\n\t\t\tconst tmpBuffer = ( info.type == 1 ) ? new Uint16Array( sz ) : new Uint32Array( sz );\n\n\t\t\tlet tmpBufferEnd = 0;\n\t\t\tlet writePtr = 0;\n\t\t\tconst ptr = new Array( 4 );\n\n\t\t\tfor ( let y = 0; y < info.lines; y ++ ) {\n\n\t\t\t\tfor ( let c = 0; c < info.channels; c ++ ) {\n\n\t\t\t\t\tlet pixel = 0;\n\n\t\t\t\t\tswitch ( info.type ) {\n\n\t\t\t\t\t\tcase 1:\n\n\t\t\t\t\t\t\tptr[ 0 ] = tmpBufferEnd;\n\t\t\t\t\t\t\tptr[ 1 ] = ptr[ 0 ] + info.width;\n\t\t\t\t\t\t\ttmpBufferEnd = ptr[ 1 ] + info.width;\n\n\t\t\t\t\t\t\tfor ( let j = 0; j < info.width; ++ j ) {\n\n\t\t\t\t\t\t\t\tconst diff = ( rawBuffer[ ptr[ 0 ] ++ ] << 8 ) | rawBuffer[ ptr[ 1 ] ++ ];\n\n\t\t\t\t\t\t\t\tpixel += diff;\n\n\t\t\t\t\t\t\t\ttmpBuffer[ writePtr ] = pixel;\n\t\t\t\t\t\t\t\twritePtr ++;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 2:\n\n\t\t\t\t\t\t\tptr[ 0 ] = tmpBufferEnd;\n\t\t\t\t\t\t\tptr[ 1 ] = ptr[ 0 ] + info.width;\n\t\t\t\t\t\t\tptr[ 2 ] = ptr[ 1 ] + info.width;\n\t\t\t\t\t\t\ttmpBufferEnd = ptr[ 2 ] + info.width;\n\n\t\t\t\t\t\t\tfor ( let j = 0; j < info.width; ++ j ) {\n\n\t\t\t\t\t\t\t\tconst diff = ( rawBuffer[ ptr[ 0 ] ++ ] << 24 ) | ( rawBuffer[ ptr[ 1 ] ++ ] << 16 ) | ( rawBuffer[ ptr[ 2 ] ++ ] << 8 );\n\n\t\t\t\t\t\t\t\tpixel += diff;\n\n\t\t\t\t\t\t\t\ttmpBuffer[ writePtr ] = pixel;\n\t\t\t\t\t\t\t\twritePtr ++;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new DataView( tmpBuffer.buffer );\n\n\t\t}\n\n\t\tfunction uncompressDWA( info ) {\n\n\t\t\tconst inDataView = info.viewer;\n\t\t\tconst inOffset = { value: info.offset.value };\n\t\t\tconst outBuffer = new Uint8Array( info.width * info.lines * ( info.channels * info.type * INT16_SIZE ) );\n\n\t\t\t// Read compression header information\n\t\t\tconst dwaHeader = {\n\n\t\t\t\tversion: parseInt64( inDataView, inOffset ),\n\t\t\t\tunknownUncompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\tunknownCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\tacCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\tdcCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\trleCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\trleUncompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\trleRawSize: parseInt64( inDataView, inOffset ),\n\t\t\t\ttotalAcUncompressedCount: parseInt64( inDataView, inOffset ),\n\t\t\t\ttotalDcUncompressedCount: parseInt64( inDataView, inOffset ),\n\t\t\t\tacCompression: parseInt64( inDataView, inOffset )\n\n\t\t\t};\n\n\t\t\tif ( dwaHeader.version < 2 )\n\t\t\t\tthrow new Error( 'EXRLoader.parse: ' + EXRHeader.compression + ' version ' + dwaHeader.version + ' is unsupported' );\n\n\t\t\t// Read channel ruleset information\n\t\t\tconst channelRules = new Array();\n\t\t\tlet ruleSize = parseUint16( inDataView, inOffset ) - INT16_SIZE;\n\n\t\t\twhile ( ruleSize > 0 ) {\n\n\t\t\t\tconst name = parseNullTerminatedString( inDataView.buffer, inOffset );\n\t\t\t\tconst value = parseUint8( inDataView, inOffset );\n\t\t\t\tconst compression = ( value >> 2 ) & 3;\n\t\t\t\tconst csc = ( value >> 4 ) - 1;\n\t\t\t\tconst index = new Int8Array( [ csc ] )[ 0 ];\n\t\t\t\tconst type = parseUint8( inDataView, inOffset );\n\n\t\t\t\tchannelRules.push( {\n\t\t\t\t\tname: name,\n\t\t\t\t\tindex: index,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tcompression: compression,\n\t\t\t\t} );\n\n\t\t\t\truleSize -= name.length + 3;\n\n\t\t\t}\n\n\t\t\t// Classify channels\n\t\t\tconst channels = EXRHeader.channels;\n\t\t\tconst channelData = new Array( info.channels );\n\n\t\t\tfor ( let i = 0; i < info.channels; ++ i ) {\n\n\t\t\t\tconst cd = channelData[ i ] = {};\n\t\t\t\tconst channel = channels[ i ];\n\n\t\t\t\tcd.name = channel.name;\n\t\t\t\tcd.compression = UNKNOWN;\n\t\t\t\tcd.decoded = false;\n\t\t\t\tcd.type = channel.pixelType;\n\t\t\t\tcd.pLinear = channel.pLinear;\n\t\t\t\tcd.width = info.width;\n\t\t\t\tcd.height = info.lines;\n\n\t\t\t}\n\n\t\t\tconst cscSet = {\n\t\t\t\tidx: new Array( 3 )\n\t\t\t};\n\n\t\t\tfor ( let offset = 0; offset < info.channels; ++ offset ) {\n\n\t\t\t\tconst cd = channelData[ offset ];\n\n\t\t\t\tfor ( let i = 0; i < channelRules.length; ++ i ) {\n\n\t\t\t\t\tconst rule = channelRules[ i ];\n\n\t\t\t\t\tif ( cd.name == rule.name ) {\n\n\t\t\t\t\t\tcd.compression = rule.compression;\n\n\t\t\t\t\t\tif ( rule.index >= 0 ) {\n\n\t\t\t\t\t\t\tcscSet.idx[ rule.index ] = offset;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcd.offset = offset;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlet acBuffer, dcBuffer, rleBuffer;\n\n\t\t\t// Read DCT - AC component data\n\t\t\tif ( dwaHeader.acCompressedSize > 0 ) {\n\n\t\t\t\tswitch ( dwaHeader.acCompression ) {\n\n\t\t\t\t\tcase STATIC_HUFFMAN:\n\n\t\t\t\t\t\tacBuffer = new Uint16Array( dwaHeader.totalAcUncompressedCount );\n\t\t\t\t\t\thufUncompress( info.array, inDataView, inOffset, dwaHeader.acCompressedSize, acBuffer, dwaHeader.totalAcUncompressedCount );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase DEFLATE:\n\n\t\t\t\t\t\tconst compressed = info.array.slice( inOffset.value, inOffset.value + dwaHeader.totalAcUncompressedCount );\n\t\t\t\t\t\tconst data = fflate.unzlibSync( compressed ); // eslint-disable-line no-undef\n\t\t\t\t\t\tacBuffer = new Uint16Array( data.buffer );\n\t\t\t\t\t\tinOffset.value += dwaHeader.totalAcUncompressedCount;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t\t// Read DCT - DC component data\n\t\t\tif ( dwaHeader.dcCompressedSize > 0 ) {\n\n\t\t\t\tconst zlibInfo = {\n\t\t\t\t\tarray: info.array,\n\t\t\t\t\toffset: inOffset,\n\t\t\t\t\tsize: dwaHeader.dcCompressedSize\n\t\t\t\t};\n\t\t\t\tdcBuffer = new Uint16Array( uncompressZIP( zlibInfo ).buffer );\n\t\t\t\tinOffset.value += dwaHeader.dcCompressedSize;\n\n\t\t\t}\n\n\t\t\t// Read RLE compressed data\n\t\t\tif ( dwaHeader.rleRawSize > 0 ) {\n\n\t\t\t\tconst compressed = info.array.slice( inOffset.value, inOffset.value + dwaHeader.rleCompressedSize );\n\t\t\t\tconst data = fflate.unzlibSync( compressed ); // eslint-disable-line no-undef\n\t\t\t\trleBuffer = decodeRunLength( data.buffer );\n\n\t\t\t\tinOffset.value += dwaHeader.rleCompressedSize;\n\n\t\t\t}\n\n\t\t\t// Prepare outbuffer data offset\n\t\t\tlet outBufferEnd = 0;\n\t\t\tconst rowOffsets = new Array( channelData.length );\n\t\t\tfor ( let i = 0; i < rowOffsets.length; ++ i ) {\n\n\t\t\t\trowOffsets[ i ] = new Array();\n\n\t\t\t}\n\n\t\t\tfor ( let y = 0; y < info.lines; ++ y ) {\n\n\t\t\t\tfor ( let chan = 0; chan < channelData.length; ++ chan ) {\n\n\t\t\t\t\trowOffsets[ chan ].push( outBufferEnd );\n\t\t\t\t\toutBufferEnd += channelData[ chan ].width * info.type * INT16_SIZE;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Lossy DCT decode RGB channels\n\t\t\tlossyDctDecode( cscSet, rowOffsets, channelData, acBuffer, dcBuffer, outBuffer );\n\n\t\t\t// Decode other channels\n\t\t\tfor ( let i = 0; i < channelData.length; ++ i ) {\n\n\t\t\t\tconst cd = channelData[ i ];\n\n\t\t\t\tif ( cd.decoded ) continue;\n\n\t\t\t\tswitch ( cd.compression ) {\n\n\t\t\t\t\tcase RLE:\n\n\t\t\t\t\t\tlet row = 0;\n\t\t\t\t\t\tlet rleOffset = 0;\n\n\t\t\t\t\t\tfor ( let y = 0; y < info.lines; ++ y ) {\n\n\t\t\t\t\t\t\tlet rowOffsetBytes = rowOffsets[ i ][ row ];\n\n\t\t\t\t\t\t\tfor ( let x = 0; x < cd.width; ++ x ) {\n\n\t\t\t\t\t\t\t\tfor ( let byte = 0; byte < INT16_SIZE * cd.type; ++ byte ) {\n\n\t\t\t\t\t\t\t\t\toutBuffer[ rowOffsetBytes ++ ] = rleBuffer[ rleOffset + byte * cd.width * cd.height ];\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\trleOffset ++;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\trow ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase LOSSY_DCT: // skip\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error( 'EXRLoader.parse: unsupported channel compression' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new DataView( outBuffer.buffer );\n\n\t\t}\n\n\t\tfunction parseNullTerminatedString( buffer, offset ) {\n\n\t\t\tconst uintBuffer = new Uint8Array( buffer );\n\t\t\tlet endOffset = 0;\n\n\t\t\twhile ( uintBuffer[ offset.value + endOffset ] != 0 ) {\n\n\t\t\t\tendOffset += 1;\n\n\t\t\t}\n\n\t\t\tconst stringValue = new TextDecoder().decode(\n\t\t\t\tuintBuffer.slice( offset.value, offset.value + endOffset )\n\t\t\t);\n\n\t\t\toffset.value = offset.value + endOffset + 1;\n\n\t\t\treturn stringValue;\n\n\t\t}\n\n\t\tfunction parseFixedLengthString( buffer, offset, size ) {\n\n\t\t\tconst stringValue = new TextDecoder().decode(\n\t\t\t\tnew Uint8Array( buffer ).slice( offset.value, offset.value + size )\n\t\t\t);\n\n\t\t\toffset.value = offset.value + size;\n\n\t\t\treturn stringValue;\n\n\t\t}\n\n\t\tfunction parseRational( dataView, offset ) {\n\n\t\t\tconst x = parseInt32( dataView, offset );\n\t\t\tconst y = parseUint32( dataView, offset );\n\n\t\t\treturn [ x, y ];\n\n\t\t}\n\n\t\tfunction parseTimecode( dataView, offset ) {\n\n\t\t\tconst x = parseUint32( dataView, offset );\n\t\t\tconst y = parseUint32( dataView, offset );\n\n\t\t\treturn [ x, y ];\n\n\t\t}\n\n\t\tfunction parseInt32( dataView, offset ) {\n\n\t\t\tconst Int32 = dataView.getInt32( offset.value, true );\n\n\t\t\toffset.value = offset.value + INT32_SIZE;\n\n\t\t\treturn Int32;\n\n\t\t}\n\n\t\tfunction parseUint32( dataView, offset ) {\n\n\t\t\tconst Uint32 = dataView.getUint32( offset.value, true );\n\n\t\t\toffset.value = offset.value + INT32_SIZE;\n\n\t\t\treturn Uint32;\n\n\t\t}\n\n\t\tfunction parseUint8Array( uInt8Array, offset ) {\n\n\t\t\tconst Uint8 = uInt8Array[ offset.value ];\n\n\t\t\toffset.value = offset.value + INT8_SIZE;\n\n\t\t\treturn Uint8;\n\n\t\t}\n\n\t\tfunction parseUint8( dataView, offset ) {\n\n\t\t\tconst Uint8 = dataView.getUint8( offset.value );\n\n\t\t\toffset.value = offset.value + INT8_SIZE;\n\n\t\t\treturn Uint8;\n\n\t\t}\n\n\t\tconst parseInt64 = function ( dataView, offset ) {\n\n\t\t\tconst Int64 = Number( dataView.getBigInt64( offset.value, true ) );\n\n\t\t\toffset.value += ULONG_SIZE;\n\n\t\t\treturn Int64;\n\n\t\t};\n\n\t\tfunction parseFloat32( dataView, offset ) {\n\n\t\t\tconst float = dataView.getFloat32( offset.value, true );\n\n\t\t\toffset.value += FLOAT32_SIZE;\n\n\t\t\treturn float;\n\n\t\t}\n\n\t\tfunction decodeFloat32( dataView, offset ) {\n\n\t\t\treturn DataUtils.toHalfFloat( parseFloat32( dataView, offset ) );\n\n\t\t}\n\n\t\t// https://stackoverflow.com/questions/5678432/decompressing-half-precision-floats-in-javascript\n\t\tfunction decodeFloat16( binary ) {\n\n\t\t\tconst exponent = ( binary & 0x7C00 ) >> 10,\n\t\t\t\tfraction = binary & 0x03FF;\n\n\t\t\treturn ( binary >> 15 ? - 1 : 1 ) * (\n\t\t\t\texponent ?\n\t\t\t\t\t(\n\t\t\t\t\t\texponent === 0x1F ?\n\t\t\t\t\t\t\tfraction ? NaN : Infinity :\n\t\t\t\t\t\t\tMath.pow( 2, exponent - 15 ) * ( 1 + fraction / 0x400 )\n\t\t\t\t\t) :\n\t\t\t\t\t6.103515625e-5 * ( fraction / 0x400 )\n\t\t\t);\n\n\t\t}\n\n\t\tfunction parseUint16( dataView, offset ) {\n\n\t\t\tconst Uint16 = dataView.getUint16( offset.value, true );\n\n\t\t\toffset.value += INT16_SIZE;\n\n\t\t\treturn Uint16;\n\n\t\t}\n\n\t\tfunction parseFloat16( buffer, offset ) {\n\n\t\t\treturn decodeFloat16( parseUint16( buffer, offset ) );\n\n\t\t}\n\n\t\tfunction parseChlist( dataView, buffer, offset, size ) {\n\n\t\t\tconst startOffset = offset.value;\n\t\t\tconst channels = [];\n\n\t\t\twhile ( offset.value < ( startOffset + size - 1 ) ) {\n\n\t\t\t\tconst name = parseNullTerminatedString( buffer, offset );\n\t\t\t\tconst pixelType = parseInt32( dataView, offset );\n\t\t\t\tconst pLinear = parseUint8( dataView, offset );\n\t\t\t\toffset.value += 3; // reserved, three chars\n\t\t\t\tconst xSampling = parseInt32( dataView, offset );\n\t\t\t\tconst ySampling = parseInt32( dataView, offset );\n\n\t\t\t\tchannels.push( {\n\t\t\t\t\tname: name,\n\t\t\t\t\tpixelType: pixelType,\n\t\t\t\t\tpLinear: pLinear,\n\t\t\t\t\txSampling: xSampling,\n\t\t\t\t\tySampling: ySampling\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\toffset.value += 1;\n\n\t\t\treturn channels;\n\n\t\t}\n\n\t\tfunction parseChromaticities( dataView, offset ) {\n\n\t\t\tconst redX = parseFloat32( dataView, offset );\n\t\t\tconst redY = parseFloat32( dataView, offset );\n\t\t\tconst greenX = parseFloat32( dataView, offset );\n\t\t\tconst greenY = parseFloat32( dataView, offset );\n\t\t\tconst blueX = parseFloat32( dataView, offset );\n\t\t\tconst blueY = parseFloat32( dataView, offset );\n\t\t\tconst whiteX = parseFloat32( dataView, offset );\n\t\t\tconst whiteY = parseFloat32( dataView, offset );\n\n\t\t\treturn { redX: redX, redY: redY, greenX: greenX, greenY: greenY, blueX: blueX, blueY: blueY, whiteX: whiteX, whiteY: whiteY };\n\n\t\t}\n\n\t\tfunction parseCompression( dataView, offset ) {\n\n\t\t\tconst compressionCodes = [\n\t\t\t\t'NO_COMPRESSION',\n\t\t\t\t'RLE_COMPRESSION',\n\t\t\t\t'ZIPS_COMPRESSION',\n\t\t\t\t'ZIP_COMPRESSION',\n\t\t\t\t'PIZ_COMPRESSION',\n\t\t\t\t'PXR24_COMPRESSION',\n\t\t\t\t'B44_COMPRESSION',\n\t\t\t\t'B44A_COMPRESSION',\n\t\t\t\t'DWAA_COMPRESSION',\n\t\t\t\t'DWAB_COMPRESSION'\n\t\t\t];\n\n\t\t\tconst compression = parseUint8( dataView, offset );\n\n\t\t\treturn compressionCodes[ compression ];\n\n\t\t}\n\n\t\tfunction parseBox2i( dataView, offset ) {\n\n\t\t\tconst xMin = parseUint32( dataView, offset );\n\t\t\tconst yMin = parseUint32( dataView, offset );\n\t\t\tconst xMax = parseUint32( dataView, offset );\n\t\t\tconst yMax = parseUint32( dataView, offset );\n\n\t\t\treturn { xMin: xMin, yMin: yMin, xMax: xMax, yMax: yMax };\n\n\t\t}\n\n\t\tfunction parseLineOrder( dataView, offset ) {\n\n\t\t\tconst lineOrders = [\n\t\t\t\t'INCREASING_Y'\n\t\t\t];\n\n\t\t\tconst lineOrder = parseUint8( dataView, offset );\n\n\t\t\treturn lineOrders[ lineOrder ];\n\n\t\t}\n\n\t\tfunction parseV2f( dataView, offset ) {\n\n\t\t\tconst x = parseFloat32( dataView, offset );\n\t\t\tconst y = parseFloat32( dataView, offset );\n\n\t\t\treturn [ x, y ];\n\n\t\t}\n\n\t\tfunction parseV3f( dataView, offset ) {\n\n\t\t\tconst x = parseFloat32( dataView, offset );\n\t\t\tconst y = parseFloat32( dataView, offset );\n\t\t\tconst z = parseFloat32( dataView, offset );\n\n\t\t\treturn [ x, y, z ];\n\n\t\t}\n\n\t\tfunction parseValue( dataView, buffer, offset, type, size ) {\n\n\t\t\tif ( type === 'string' || type === 'stringvector' || type === 'iccProfile' ) {\n\n\t\t\t\treturn parseFixedLengthString( buffer, offset, size );\n\n\t\t\t} else if ( type === 'chlist' ) {\n\n\t\t\t\treturn parseChlist( dataView, buffer, offset, size );\n\n\t\t\t} else if ( type === 'chromaticities' ) {\n\n\t\t\t\treturn parseChromaticities( dataView, offset );\n\n\t\t\t} else if ( type === 'compression' ) {\n\n\t\t\t\treturn parseCompression( dataView, offset );\n\n\t\t\t} else if ( type === 'box2i' ) {\n\n\t\t\t\treturn parseBox2i( dataView, offset );\n\n\t\t\t} else if ( type === 'lineOrder' ) {\n\n\t\t\t\treturn parseLineOrder( dataView, offset );\n\n\t\t\t} else if ( type === 'float' ) {\n\n\t\t\t\treturn parseFloat32( dataView, offset );\n\n\t\t\t} else if ( type === 'v2f' ) {\n\n\t\t\t\treturn parseV2f( dataView, offset );\n\n\t\t\t} else if ( type === 'v3f' ) {\n\n\t\t\t\treturn parseV3f( dataView, offset );\n\n\t\t\t} else if ( type === 'int' ) {\n\n\t\t\t\treturn parseInt32( dataView, offset );\n\n\t\t\t} else if ( type === 'rational' ) {\n\n\t\t\t\treturn parseRational( dataView, offset );\n\n\t\t\t} else if ( type === 'timecode' ) {\n\n\t\t\t\treturn parseTimecode( dataView, offset );\n\n\t\t\t} else if ( type === 'preview' ) {\n\n\t\t\t\toffset.value += size;\n\t\t\t\treturn 'skipped';\n\n\t\t\t} else {\n\n\t\t\t\toffset.value += size;\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseHeader( dataView, buffer, offset ) {\n\n\t\t\tconst EXRHeader = {};\n\n\t\t\tif ( dataView.getUint32( 0, true ) != 20000630 ) { // magic\n\n\t\t\t\tthrow new Error( 'THREE.EXRLoader: provided file doesn\\'t appear to be in OpenEXR format.' );\n\n\t\t\t}\n\n\t\t\tEXRHeader.version = dataView.getUint8( 4 );\n\n\t\t\tconst spec = dataView.getUint8( 5 ); // fullMask\n\n\t\t\tEXRHeader.spec = {\n\t\t\t\tsingleTile: !! ( spec & 2 ),\n\t\t\t\tlongName: !! ( spec & 4 ),\n\t\t\t\tdeepFormat: !! ( spec & 8 ),\n\t\t\t\tmultiPart: !! ( spec & 16 ),\n\t\t\t};\n\n\t\t\t// start of header\n\n\t\t\toffset.value = 8; // start at 8 - after pre-amble\n\n\t\t\tlet keepReading = true;\n\n\t\t\twhile ( keepReading ) {\n\n\t\t\t\tconst attributeName = parseNullTerminatedString( buffer, offset );\n\n\t\t\t\tif ( attributeName == 0 ) {\n\n\t\t\t\t\tkeepReading = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst attributeType = parseNullTerminatedString( buffer, offset );\n\t\t\t\t\tconst attributeSize = parseUint32( dataView, offset );\n\t\t\t\t\tconst attributeValue = parseValue( dataView, buffer, offset, attributeType, attributeSize );\n\n\t\t\t\t\tif ( attributeValue === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( `EXRLoader.parse: skipped unknown header attribute type \\'${attributeType}\\'.` );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tEXRHeader[ attributeName ] = attributeValue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ( spec & ~ 0x04 ) != 0 ) { // unsupported tiled, deep-image, multi-part\n\n\t\t\t\tconsole.error( 'EXRHeader:', EXRHeader );\n\t\t\t\tthrow new Error( 'THREE.EXRLoader: provided file is currently unsupported.' );\n\n\t\t\t}\n\n\t\t\treturn EXRHeader;\n\n\t\t}\n\n\t\tfunction setupDecoder( EXRHeader, dataView, uInt8Array, offset, outputType ) {\n\n\t\t\tconst EXRDecoder = {\n\t\t\t\tsize: 0,\n\t\t\t\tviewer: dataView,\n\t\t\t\tarray: uInt8Array,\n\t\t\t\toffset: offset,\n\t\t\t\twidth: EXRHeader.dataWindow.xMax - EXRHeader.dataWindow.xMin + 1,\n\t\t\t\theight: EXRHeader.dataWindow.yMax - EXRHeader.dataWindow.yMin + 1,\n\t\t\t\tchannels: EXRHeader.channels.length,\n\t\t\t\tbytesPerLine: null,\n\t\t\t\tlines: null,\n\t\t\t\tinputSize: null,\n\t\t\t\ttype: EXRHeader.channels[ 0 ].pixelType,\n\t\t\t\tuncompress: null,\n\t\t\t\tgetter: null,\n\t\t\t\tformat: null,\n\t\t\t\tencoding: null,\n\t\t\t};\n\n\t\t\tswitch ( EXRHeader.compression ) {\n\n\t\t\t\tcase 'NO_COMPRESSION':\n\t\t\t\t\tEXRDecoder.lines = 1;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressRAW;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RLE_COMPRESSION':\n\t\t\t\t\tEXRDecoder.lines = 1;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressRLE;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZIPS_COMPRESSION':\n\t\t\t\t\tEXRDecoder.lines = 1;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressZIP;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZIP_COMPRESSION':\n\t\t\t\t\tEXRDecoder.lines = 16;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressZIP;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PIZ_COMPRESSION':\n\t\t\t\t\tEXRDecoder.lines = 32;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressPIZ;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PXR24_COMPRESSION':\n\t\t\t\t\tEXRDecoder.lines = 16;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressPXR;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DWAA_COMPRESSION':\n\t\t\t\t\tEXRDecoder.lines = 32;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressDWA;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DWAB_COMPRESSION':\n\t\t\t\t\tEXRDecoder.lines = 256;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressDWA;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'EXRLoader.parse: ' + EXRHeader.compression + ' is unsupported' );\n\n\t\t\t}\n\n\t\t\tEXRDecoder.scanlineBlockSize = EXRDecoder.lines;\n\n\t\t\tif ( EXRDecoder.type == 1 ) {\n\n\t\t\t\t// half\n\t\t\t\tswitch ( outputType ) {\n\n\t\t\t\t\tcase FloatType:\n\t\t\t\t\t\tEXRDecoder.getter = parseFloat16;\n\t\t\t\t\t\tEXRDecoder.inputSize = INT16_SIZE;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\t\t\t\t\t\tEXRDecoder.getter = parseUint16;\n\t\t\t\t\t\tEXRDecoder.inputSize = INT16_SIZE;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else if ( EXRDecoder.type == 2 ) {\n\n\t\t\t\t// float\n\t\t\t\tswitch ( outputType ) {\n\n\t\t\t\t\tcase FloatType:\n\t\t\t\t\t\tEXRDecoder.getter = parseFloat32;\n\t\t\t\t\t\tEXRDecoder.inputSize = FLOAT32_SIZE;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\t\t\t\t\t\tEXRDecoder.getter = decodeFloat32;\n\t\t\t\t\t\tEXRDecoder.inputSize = FLOAT32_SIZE;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'EXRLoader.parse: unsupported pixelType ' + EXRDecoder.type + ' for ' + EXRHeader.compression + '.' );\n\n\t\t\t}\n\n\t\t\tEXRDecoder.blockCount = ( EXRHeader.dataWindow.yMax + 1 ) / EXRDecoder.scanlineBlockSize;\n\n\t\t\tfor ( let i = 0; i < EXRDecoder.blockCount; i ++ )\n\t\t\t\tparseInt64( dataView, offset ); // scanlineOffset\n\n\t\t\t// we should be passed the scanline offset table, ready to start reading pixel data.\n\n\t\t\t// RGB images will be converted to RGBA format, preventing software emulation in select devices.\n\t\t\tEXRDecoder.outputChannels = ( ( EXRDecoder.channels == 3 ) ? 4 : EXRDecoder.channels );\n\t\t\tconst size = EXRDecoder.width * EXRDecoder.height * EXRDecoder.outputChannels;\n\n\t\t\tswitch ( outputType ) {\n\n\t\t\t\tcase FloatType:\n\t\t\t\t\tEXRDecoder.byteArray = new Float32Array( size );\n\n\t\t\t\t\t// Fill initially with 1s for the alpha value if the texture is not RGBA, RGB values will be overwritten\n\t\t\t\t\tif ( EXRDecoder.channels < EXRDecoder.outputChannels )\n\t\t\t\t\t\tEXRDecoder.byteArray.fill( 1, 0, size );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase HalfFloatType:\n\t\t\t\t\tEXRDecoder.byteArray = new Uint16Array( size );\n\n\t\t\t\t\tif ( EXRDecoder.channels < EXRDecoder.outputChannels )\n\t\t\t\t\t\tEXRDecoder.byteArray.fill( 0x3C00, 0, size ); // Uint16Array holds half float data, 0x3C00 is 1\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.EXRLoader: unsupported type: ', outputType );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tEXRDecoder.bytesPerLine = EXRDecoder.width * EXRDecoder.inputSize * EXRDecoder.channels;\n\n\t\t\tif ( EXRDecoder.outputChannels == 4 ) {\n\n\t\t\t\tEXRDecoder.format = RGBAFormat;\n\t\t\t\tEXRDecoder.encoding = LinearEncoding;\n\n\t\t\t} else {\n\n\t\t\t\tEXRDecoder.format = RedFormat;\n\t\t\t\tEXRDecoder.encoding = LinearEncoding;\n\n\t\t\t}\n\n\t\t\treturn EXRDecoder;\n\n\t\t}\n\n\t\t// start parsing file [START]\n\n\t\tconst bufferDataView = new DataView( buffer );\n\t\tconst uInt8Array = new Uint8Array( buffer );\n\t\tconst offset = { value: 0 };\n\n\t\t// get header information and validate format.\n\t\tconst EXRHeader = parseHeader( bufferDataView, buffer, offset );\n\n\t\t// get input compression information and prepare decoding.\n\t\tconst EXRDecoder = setupDecoder( EXRHeader, bufferDataView, uInt8Array, offset, this.type );\n\n\t\tconst tmpOffset = { value: 0 };\n\t\tconst channelOffsets = { R: 0, G: 1, B: 2, A: 3, Y: 0 };\n\n\t\tfor ( let scanlineBlockIdx = 0; scanlineBlockIdx < EXRDecoder.height / EXRDecoder.scanlineBlockSize; scanlineBlockIdx ++ ) {\n\n\t\t\tconst line = parseUint32( bufferDataView, offset ); // line_no\n\t\t\tEXRDecoder.size = parseUint32( bufferDataView, offset ); // data_len\n\t\t\tEXRDecoder.lines = ( ( line + EXRDecoder.scanlineBlockSize > EXRDecoder.height ) ? ( EXRDecoder.height - line ) : EXRDecoder.scanlineBlockSize );\n\n\t\t\tconst isCompressed = EXRDecoder.size < EXRDecoder.lines * EXRDecoder.bytesPerLine;\n\t\t\tconst viewer = isCompressed ? EXRDecoder.uncompress( EXRDecoder ) : uncompressRAW( EXRDecoder );\n\n\t\t\toffset.value += EXRDecoder.size;\n\n\t\t\tfor ( let line_y = 0; line_y < EXRDecoder.scanlineBlockSize; line_y ++ ) {\n\n\t\t\t\tconst true_y = line_y + scanlineBlockIdx * EXRDecoder.scanlineBlockSize;\n\t\t\t\tif ( true_y >= EXRDecoder.height ) break;\n\n\t\t\t\tfor ( let channelID = 0; channelID < EXRDecoder.channels; channelID ++ ) {\n\n\t\t\t\t\tconst cOff = channelOffsets[ EXRHeader.channels[ channelID ].name ];\n\n\t\t\t\t\tfor ( let x = 0; x < EXRDecoder.width; x ++ ) {\n\n\t\t\t\t\t\ttmpOffset.value = ( line_y * ( EXRDecoder.channels * EXRDecoder.width ) + channelID * EXRDecoder.width + x ) * EXRDecoder.inputSize;\n\t\t\t\t\t\tconst outIndex = ( EXRDecoder.height - 1 - true_y ) * ( EXRDecoder.width * EXRDecoder.outputChannels ) + x * EXRDecoder.outputChannels + cOff;\n\t\t\t\t\t\tEXRDecoder.byteArray[ outIndex ] = EXRDecoder.getter( viewer, tmpOffset );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\theader: EXRHeader,\n\t\t\twidth: EXRDecoder.width,\n\t\t\theight: EXRDecoder.height,\n\t\t\tdata: EXRDecoder.byteArray,\n\t\t\tformat: EXRDecoder.format,\n\t\t\tencoding: EXRDecoder.encoding,\n\t\t\ttype: this.type,\n\t\t};\n\n\t}\n\n\tsetDataType( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\ttexture.encoding = texData.encoding;\n\t\t\ttexture.minFilter = LinearFilter;\n\t\t\ttexture.magFilter = LinearFilter;\n\t\t\ttexture.generateMipmaps = false;\n\t\t\ttexture.flipY = false;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn super.load( url, onLoadCallback, onProgress, onError );\n\n\t}\n\n}\n\nexport { EXRLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}