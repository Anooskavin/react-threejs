{"ast":null,"code":"var _jsxFileName = \"/home/anoo/Documents/React/Three-js/three-js/src/Geometry.js\";\nimport React, { Component } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'https://threejsfundamentals.org/threejs/resources/threejs/r115/examples/jsm/controls/OrbitControls.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Geometry extends Component {\n  componentDidMount() {\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    var renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    this.mount.appendChild(renderer.domElement);\n    camera.position.z = 5;\n    var controls = new OrbitControls(camera); // var box = new THREE.BoxGeometry(1, 1, 1);\n    // var sphere = new THREE.SphereGeometry(.65, 32, 32)\n    // var singleGeometry = new THREE.Geometry()\n    // var boxMesh = new THREE.Mesh(box)\n    // var sphereMesh = new THREE.Mesh(sphere)\n    // boxMesh.updateMatrix();\n    // singleGeometry.merge(boxMesh.geometry, boxMesh.matrix)\n    // sphereMesh.updateMatrix();\n    // singleGeometry.merge(sphereMesh.geometry, sphereMesh.matrix)\n    // var material = new THREE.MeshPhongMaterial({ color: 0xFF0000 });\n    // var mesh = new THREE.Mesh(singleGeometry, material);\n    // scene.add(mesh);\n    // var light = new THREE.HemisphereLight(0xfffff0, 0x101020, 1.25);\n    // light.position.set(0.75, 1, 0.25);\n    // scene.add(light);\n    // var animate = function (){\n    //     requestAnimationFrame(animate)\n    //     renderer.render(scene, camera)\n    // }\n    // animate();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 100,\n        height: 100\n      },\n      ref: ref => this.mount = ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Geometry; // const Circlegeometry = new THREE.CircleGeometry(3,6);\n// const Circlematerial = new THREE.MeshBasicMaterial({ color: 0xffffff});\n// const Circle = new THREE.Mesh(Circlegeometry, Circlematerial);\n// scene.add(Circle)\n// const Cubegeometry = new THREE.BoxGeometry(1, 1, 1,1,1);\n// const Cubematerial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n// const cube = new THREE.Mesh(Cubegeometry, Cubematerial);\n// scene.add(cube)\n// const Conegeometry = new THREE.ConeGeometry(1,1);\n// const Conematerial = new THREE.MeshBasicMaterial({ color: 0x789456 });\n// const Cone = new THREE.Mesh(Conegeometry, Conematerial);\n// scene.add(Cone)\n// const Ringgeometry = new THREE.RingGeometry(1,2);\n// const Ringmaterial = new THREE.MeshBasicMaterial({ color: 0xcf8804 });\n// const Ring = new THREE.Mesh(Ringgeometry, Ringmaterial);\n// scene.add(Ring)","map":{"version":3,"names":["React","Component","THREE","OrbitControls","Geometry","componentDidMount","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","setSize","mount","appendChild","domElement","position","z","controls","render","width","height","ref"],"sources":["/home/anoo/Documents/React/Three-js/three-js/src/Geometry.js"],"sourcesContent":["import React, { Component } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'https://threejsfundamentals.org/threejs/resources/threejs/r115/examples/jsm/controls/OrbitControls.js';\nclass Geometry extends Component {\n    componentDidMount() {\n        var scene = new THREE.Scene();\n        var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)\n        var renderer = new THREE.WebGLRenderer({\n            antialias: true\n        })\n        renderer.setSize(window.innerWidth, window.innerHeight)\n        this.mount.appendChild(renderer.domElement)\n        camera.position.z = 5;\n        var controls = new OrbitControls(camera)\n        // var box = new THREE.BoxGeometry(1, 1, 1);\n        // var sphere = new THREE.SphereGeometry(.65, 32, 32)\n        // var singleGeometry = new THREE.Geometry()\n        // var boxMesh = new THREE.Mesh(box)\n        // var sphereMesh = new THREE.Mesh(sphere)\n        // boxMesh.updateMatrix();\n        // singleGeometry.merge(boxMesh.geometry, boxMesh.matrix)\n        // sphereMesh.updateMatrix();\n        // singleGeometry.merge(sphereMesh.geometry, sphereMesh.matrix)\n        // var material = new THREE.MeshPhongMaterial({ color: 0xFF0000 });\n        // var mesh = new THREE.Mesh(singleGeometry, material);\n        // scene.add(mesh);\n\n        // var light = new THREE.HemisphereLight(0xfffff0, 0x101020, 1.25);\n        // light.position.set(0.75, 1, 0.25);\n        // scene.add(light);\n\n        // var animate = function (){\n        //     requestAnimationFrame(animate)\n        //     renderer.render(scene, camera)\n        // }\n        // animate();\n        \n    }\n    render() {\n        return (\n            <div\n                style={{ width: (100), height: (100), }}\n                ref={ref => this.mount = ref}></div>\n        );\n    }\n}\n\nexport default Geometry;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        // const Circlegeometry = new THREE.CircleGeometry(3,6);\n        // const Circlematerial = new THREE.MeshBasicMaterial({ color: 0xffffff});\n        // const Circle = new THREE.Mesh(Circlegeometry, Circlematerial);\n        // scene.add(Circle)\n\n        // const Cubegeometry = new THREE.BoxGeometry(1, 1, 1,1,1);\n        // const Cubematerial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n        // const cube = new THREE.Mesh(Cubegeometry, Cubematerial);\n        // scene.add(cube)\n\n        // const Conegeometry = new THREE.ConeGeometry(1,1);\n        // const Conematerial = new THREE.MeshBasicMaterial({ color: 0x789456 });\n        // const Cone = new THREE.Mesh(Conegeometry, Conematerial);\n        // scene.add(Cone)\n\n\n\n        // const Ringgeometry = new THREE.RingGeometry(1,2);\n        // const Ringmaterial = new THREE.MeshBasicMaterial({ color: 0xcf8804 });\n        // const Ring = new THREE.Mesh(Ringgeometry, Ringmaterial);\n        // scene.add(Ring)"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,uGAA9B;;;AACA,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;EAC7BI,iBAAiB,GAAG;IAChB,IAAIC,KAAK,GAAG,IAAIJ,KAAK,CAACK,KAAV,EAAZ;IACA,IAAIC,MAAM,GAAG,IAAIN,KAAK,CAACO,iBAAV,CAA4B,EAA5B,EAAgCC,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAA3D,EAAwE,GAAxE,EAA6E,IAA7E,CAAb;IACA,IAAIC,QAAQ,GAAG,IAAIX,KAAK,CAACY,aAAV,CAAwB;MACnCC,SAAS,EAAE;IADwB,CAAxB,CAAf;IAGAF,QAAQ,CAACG,OAAT,CAAiBN,MAAM,CAACC,UAAxB,EAAoCD,MAAM,CAACE,WAA3C;IACA,KAAKK,KAAL,CAAWC,WAAX,CAAuBL,QAAQ,CAACM,UAAhC;IACAX,MAAM,CAACY,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;IACA,IAAIC,QAAQ,GAAG,IAAInB,aAAJ,CAAkBK,MAAlB,CAAf,CATgB,CAUhB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;EAEH;;EACDe,MAAM,GAAG;IACL,oBACI;MACI,KAAK,EAAE;QAAEC,KAAK,EAAG,GAAV;QAAgBC,MAAM,EAAG;MAAzB,CADX;MAEI,GAAG,EAAEC,GAAG,IAAI,KAAKT,KAAL,GAAaS;IAF7B;MAAA;MAAA;MAAA;IAAA,QADJ;EAKH;;AAzC4B;;AA4CjC,eAAetB,QAAf,C,CAmCQ;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}