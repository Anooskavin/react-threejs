{"ast":null,"code":"var _jsxFileName = \"/home/anoo/Documents/React/Three-js/three-js/src/Geometry.js\";\nimport React, { Component } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'https://threejsfundamentals.org/threejs/resources/threejs/r115/examples/jsm/controls/OrbitControls.js';\nimport { GUI } from 'dat.gui';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Geometry extends Component {\n  componentDidMount() {\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    var renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setClearColor(0xFDD023, 1);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    this.mount.appendChild(renderer.domElement);\n    camera.position.z = 5;\n    var boxGeometry = new THREE.BoxGeometry(1, 1, 1, 1, 1, 16);\n    var boxMaterial = new THREE.MeshBasicMaterial({// wireframe : true\n    });\n    var boxMesh = new THREE.Mesh(boxGeometry, boxMaterial);\n    boxMesh.position.x = -1;\n    scene.add(boxMesh);\n    new OrbitControls(camera, renderer.domElement);\n    var light = new THREE.AmbientLight(0x654321, 0.5);\n    light.castShadow = true;\n    light.intensity = 10;\n    scene.add(light);\n    var light1 = new THREE.PointLight(0xffffff, 0.5);\n    light1.castShadow = true;\n    light1.intensity = 3; // light1.position.set(0,64,32)\n\n    scene.add(light1); // boxMesh.position.set(0,0,-1000  )\n\n    const gui = new GUI();\n    const geometryFolder = gui.addFolder(\"Mesh Geometry\");\n    geometryFolder.open();\n    const rotationFolder = geometryFolder.addFolder(\"Rotation\");\n    rotationFolder.add(boxMesh.rotation, 'x', 0, Math.PI).name('Rotate X axis');\n    rotationFolder.add(boxMesh.rotation, 'y', 0, Math.PI).name('Rotate Y axis');\n    rotationFolder.add(boxMesh.rotation, 'z', 0, Math.PI).name('Rotate Z axis');\n    const scaleFolder = geometryFolder.addFolder(\"Scale\");\n    scaleFolder.add(boxMesh.scale, 'x', 0, 2).name('Scale X axis');\n    scaleFolder.add(boxMesh.scale, 'y', 0, 2).name('Scale Y axis');\n    scaleFolder.add(boxMesh.scale, 'z', 0, 2).name('Scale Z axis'); // const materialParams = {\n    //       boxMeshColor: boxMesh.material.color.getHex(),\n    //     };\n    //     gui.add(boxMesh.material, 'wireframe');\n    //     gui\n    //       .addColor(materialParams, 'boxMeshColor')\n    //       .onChange((value) => boxMesh.material.color.set(value));\n\n    renderer.render(scene, camera);\n\n    var animate = function () {\n      boxMesh.rotation.x += .01;\n      boxMesh.rotation.y += .01;\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 100,\n        height: 100\n      },\n      ref: ref => this.mount = ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Geometry; // const Circlegeometry = new THREE.CircleGeometry(3,6);\n// const Circlematerial = new THREE.MeshBasicMaterial({ color: 0xffffff});\n// const Circle = new THREE.Mesh(Circlegeometry, Circlematerial);\n// scene.add(Circle)\n// const Cubegeometry = new THREE.BoxGeometry(1, 1, 1,1,1);\n// const Cubematerial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n// const cube = new THREE.Mesh(Cubegeometry, Cubematerial);\n// scene.add(cube)\n// const Conegeometry = new THREE.ConeGeometry(1,1);\n// const Conematerial = new THREE.MeshBasicMaterial({ color: 0x789456 });\n// const Cone = new THREE.Mesh(Conegeometry, Conematerial);\n// scene.add(Cone)\n// const Ringgeometry = new THREE.RingGeometry(1,2);\n// const Ringmaterial = new THREE.MeshBasicMaterial({ color: 0xcf8804 });\n// const Ring = new THREE.Mesh(Ringgeometry, Ringmaterial);\n// scene.add(Ring)","map":{"version":3,"names":["React","Component","THREE","OrbitControls","GUI","Geometry","componentDidMount","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","setClearColor","setSize","mount","appendChild","domElement","position","z","boxGeometry","BoxGeometry","boxMaterial","MeshBasicMaterial","boxMesh","Mesh","x","add","light","AmbientLight","castShadow","intensity","light1","PointLight","gui","geometryFolder","addFolder","open","rotationFolder","rotation","Math","PI","name","scaleFolder","scale","render","animate","y","requestAnimationFrame","width","height","ref"],"sources":["/home/anoo/Documents/React/Three-js/three-js/src/Geometry.js"],"sourcesContent":["import React, { Component } from 'react';\nimport * as THREE from 'three';\nimport {OrbitControls} from 'https://threejsfundamentals.org/threejs/resources/threejs/r115/examples/jsm/controls/OrbitControls.js';\nimport { GUI } from 'dat.gui';\nclass Geometry extends Component {\n    componentDidMount() {\n        var scene = new THREE.Scene();\n        var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)\n        var renderer = new THREE.WebGLRenderer({\n            antialias: true\n        })\n        renderer.setClearColor(0xFDD023, 1);\n        renderer.setSize(window.innerWidth, window.innerHeight)\n        this.mount.appendChild(renderer.domElement)\n        camera.position.z = 5;\n        var boxGeometry = new THREE.BoxGeometry(1,1,1,1,1,16)\n        var boxMaterial = new THREE.MeshBasicMaterial ({\n            // wireframe : true\n        })\n        var boxMesh = new THREE.Mesh(boxGeometry,boxMaterial)\n        boxMesh.position.x =-1;\n        scene.add(boxMesh)\n        new OrbitControls(camera,renderer.domElement)\n\n        var light = new THREE.AmbientLight(0x654321,0.5)\n        light.castShadow = true\n        light.intensity=10\n        scene.add(light)\n        var light1 = new THREE.PointLight(0xffffff,0.5)\n        light1.castShadow = true\n        light1.intensity=3\n        // light1.position.set(0,64,32)\n        scene.add(light1)\n        // boxMesh.position.set(0,0,-1000  )\n        \n        const gui = new GUI();\n        const geometryFolder = gui.addFolder(\"Mesh Geometry\")\n        geometryFolder.open()\n        const rotationFolder = geometryFolder.addFolder(\"Rotation\")\n        rotationFolder.add(boxMesh.rotation,'x',0,Math.PI).name('Rotate X axis')\n        rotationFolder.add(boxMesh.rotation,'y',0,Math.PI).name('Rotate Y axis')\n        rotationFolder.add(boxMesh.rotation,'z',0,Math.PI).name('Rotate Z axis')\n        const scaleFolder = geometryFolder.addFolder(\"Scale\")\n        scaleFolder.add(boxMesh.scale,'x',0,2).name('Scale X axis')\n        scaleFolder.add(boxMesh.scale,'y',0,2).name('Scale Y axis')\n        scaleFolder.add(boxMesh.scale,'z',0,2).name('Scale Z axis')\n\n        // const materialParams = {\n        //       boxMeshColor: boxMesh.material.color.getHex(),\n        //     };\n        //     gui.add(boxMesh.material, 'wireframe');\n        //     gui\n        //       .addColor(materialParams, 'boxMeshColor')\n        //       .onChange((value) => boxMesh.material.color.set(value));\n\n        renderer.render(scene, camera)\n\n\n\n        var animate = function (){\n            boxMesh.rotation.x += .01\n            boxMesh.rotation.y += .01\n            requestAnimationFrame(animate)\n            renderer.render(scene, camera)\n\n        }\n        animate();\n\n    }\n    render() {\n        return (\n            <div\n                style={{ width: (100), height: (100), }}\n                ref={ref => this.mount = ref}></div>\n        );\n    }\n}\n\nexport default Geometry;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        // const Circlegeometry = new THREE.CircleGeometry(3,6);\n        // const Circlematerial = new THREE.MeshBasicMaterial({ color: 0xffffff});\n        // const Circle = new THREE.Mesh(Circlegeometry, Circlematerial);\n        // scene.add(Circle)\n\n        // const Cubegeometry = new THREE.BoxGeometry(1, 1, 1,1,1);\n        // const Cubematerial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n        // const cube = new THREE.Mesh(Cubegeometry, Cubematerial);\n        // scene.add(cube)\n\n        // const Conegeometry = new THREE.ConeGeometry(1,1);\n        // const Conematerial = new THREE.MeshBasicMaterial({ color: 0x789456 });\n        // const Cone = new THREE.Mesh(Conegeometry, Conematerial);\n        // scene.add(Cone)\n\n\n\n        // const Ringgeometry = new THREE.RingGeometry(1,2);\n        // const Ringmaterial = new THREE.MeshBasicMaterial({ color: 0xcf8804 });\n        // const Ring = new THREE.Mesh(Ringgeometry, Ringmaterial);\n        // scene.add(Ring)"],"mappings":"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"},"metadata":{},"sourceType":"module"}